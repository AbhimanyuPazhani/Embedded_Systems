
007Flag optimization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e8  080001e0  080001e0  000011e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080022c8  080022c8  000032c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022e0  080022e0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080022e0  080022e0  000032e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022e8  080022e8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022e8  080022e8  000032e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022ec  080022ec  000032ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022f0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  2000000c  080022fc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  080022fc  00004594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114c6  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002719  00000000  00000000  00015502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000767d  00000000  00000000  00017c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0001f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b78  00000000  00000000  0001fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216e9  00000000  00000000  00020880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011dea  00000000  00000000  00041f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d05e1  00000000  00000000  00053d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124334  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a98  00000000  00000000  00124378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00125e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080022b0 	.word	0x080022b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	080022b0 	.word	0x080022b0

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if (GPIO_Pin == GPIO_PIN_13)  // Check if it's from USER button
 800054c:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000550:	d000      	beq.n	8000554 <HAL_GPIO_EXTI_Callback+0x8>
    {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Toggle Blue LED
    }
}
 8000552:	4770      	bx	lr
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Toggle Blue LED
 8000554:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	f500 30f2 	add.w	r0, r0, #123904	@ 0x1e400
 800055e:	f000 bc1b 	b.w	8000d98 <HAL_GPIO_TogglePin>
 8000562:	bf00      	nop

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000568:	2230      	movs	r2, #48	@ 0x30
 800056a:	2100      	movs	r1, #0
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	a808      	add	r0, sp, #32
 8000570:	f001 fe72 	bl	8002258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	2300      	movs	r3, #0
 8000576:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800057a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800057e:	9307      	str	r3, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8000580:	f000 fcb2 	bl	8000ee8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <SystemClock_Config+0xa8>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800058c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000590:	6411      	str	r1, [r2, #64]	@ 0x40
 8000592:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000594:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80005a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ac:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b2:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005be:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005c0:	23d8      	movs	r3, #216	@ 0xd8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	e9cd 420e 	strd	r4, r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005c6:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2202      	movs	r2, #2
 80005ca:	2309      	movs	r3, #9
 80005cc:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f000 fccc 	bl	8000f6c <HAL_RCC_OscConfig>
 80005d4:	b108      	cbz	r0, 80005da <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <SystemClock_Config+0x74>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005da:	f000 fc8d 	bl	8000ef8 <HAL_PWREx_EnableOverDrive>
 80005de:	4603      	mov	r3, r0
 80005e0:	b108      	cbz	r0, 80005e6 <SystemClock_Config+0x82>
 80005e2:	b672      	cpsid	i
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005ec:	a803      	add	r0, sp, #12
 80005ee:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f8:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fc:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005fe:	f000 fed7 	bl	80013b0 <HAL_RCC_ClockConfig>
 8000602:	b108      	cbz	r0, 8000608 <SystemClock_Config+0xa4>
 8000604:	b672      	cpsid	i
  while (1)
 8000606:	e7fe      	b.n	8000606 <SystemClock_Config+0xa2>
}
 8000608:	b015      	add	sp, #84	@ 0x54
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <main>:
{
 8000614:	b500      	push	{lr}
 8000616:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	2400      	movs	r4, #0
  HAL_Init();
 800061a:	f000 f9f7 	bl	8000a0c <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800061e:	f44f 1688 	mov.w	r6, #1114112	@ 0x110000
  SystemClock_Config();
 8000622:	f7ff ff9f 	bl	8000564 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b57      	ldr	r3, [pc, #348]	@ (8000784 <main+0x170>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800062a:	f244 0181 	movw	r1, #16513	@ 0x4081
 800062e:	4856      	ldr	r0, [pc, #344]	@ (8000788 <main+0x174>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000630:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000636:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800063c:	f042 0204 	orr.w	r2, r2, #4
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
 8000642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000644:	f002 0204 	and.w	r2, r2, #4
 8000648:	9201      	str	r2, [sp, #4]
 800064a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800064e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000652:	631a      	str	r2, [r3, #48]	@ 0x30
 8000654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000656:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800065a:	9202      	str	r2, [sp, #8]
 800065c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000660:	f042 0201 	orr.w	r2, r2, #1
 8000664:	631a      	str	r2, [r3, #48]	@ 0x30
 8000666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000668:	f002 0201 	and.w	r2, r2, #1
 800066c:	9203      	str	r2, [sp, #12]
 800066e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000672:	f042 0202 	orr.w	r2, r2, #2
 8000676:	631a      	str	r2, [r3, #48]	@ 0x30
 8000678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800067a:	f002 0202 	and.w	r2, r2, #2
 800067e:	9204      	str	r2, [sp, #16]
 8000680:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000684:	f042 0208 	orr.w	r2, r2, #8
 8000688:	631a      	str	r2, [r3, #48]	@ 0x30
 800068a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800068c:	f002 0208 	and.w	r2, r2, #8
 8000690:	9205      	str	r2, [sp, #20]
 8000692:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800069a:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800069c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006a4:	9306      	str	r3, [sp, #24]
 80006a6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80006a8:	f000 fb72 	bl	8000d90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ac:	4622      	mov	r2, r4
 80006ae:	2140      	movs	r1, #64	@ 0x40
 80006b0:	4836      	ldr	r0, [pc, #216]	@ (800078c <main+0x178>)
 80006b2:	f000 fb6d 	bl	8000d90 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	a907      	add	r1, sp, #28
 80006bc:	4834      	ldr	r0, [pc, #208]	@ (8000790 <main+0x17c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c0:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f000 fa44 	bl	8000b50 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	a907      	add	r1, sp, #28
 80006ca:	4832      	ldr	r0, [pc, #200]	@ (8000794 <main+0x180>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ce:	e9cd 5607 	strd	r5, r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f000 fa3d 	bl	8000b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 80006d6:	f244 0381 	movw	r3, #16513	@ 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	a907      	add	r1, sp, #28
 80006dc:	482a      	ldr	r0, [pc, #168]	@ (8000788 <main+0x174>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 80006de:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f000 fa33 	bl	8000b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006ea:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ec:	a907      	add	r1, sp, #28
 80006ee:	4827      	ldr	r0, [pc, #156]	@ (800078c <main+0x178>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006f0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f000 fa2a 	bl	8000b50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006fc:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006fe:	a907      	add	r1, sp, #28
 8000700:	4822      	ldr	r0, [pc, #136]	@ (800078c <main+0x178>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000708:	f000 fa22 	bl	8000b50 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800070c:	4622      	mov	r2, r4
 800070e:	4621      	mov	r1, r4
 8000710:	2006      	movs	r0, #6
 8000712:	f000 f9bd 	bl	8000a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000716:	2006      	movs	r0, #6
 8000718:	f000 f9f6 	bl	8000b08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800071c:	4622      	mov	r2, r4
 800071e:	4621      	mov	r1, r4
 8000720:	2028      	movs	r0, #40	@ 0x28
 8000722:	f000 f9b5 	bl	8000a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000726:	2028      	movs	r0, #40	@ 0x28
 8000728:	f000 f9ee 	bl	8000b08 <HAL_NVIC_EnableIRQ>
  huart3.Instance = USART3;
 800072c:	481a      	ldr	r0, [pc, #104]	@ (8000798 <main+0x184>)
 800072e:	491b      	ldr	r1, [pc, #108]	@ (800079c <main+0x188>)
  huart3.Init.BaudRate = 115200;
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	230c      	movs	r3, #12
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000736:	6244      	str	r4, [r0, #36]	@ 0x24
  huart3.Init.BaudRate = 115200;
 8000738:	e880 0016 	stmia.w	r0, {r1, r2, r4}
  huart3.Init.Parity = UART_PARITY_NONE;
 800073c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000740:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000744:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000748:	f001 fb64 	bl	8001e14 <HAL_UART_Init>
 800074c:	b108      	cbz	r0, 8000752 <main+0x13e>
 800074e:	b672      	cpsid	i
  while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x13c>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000752:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000754:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000756:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <main+0x18c>)
 8000758:	f04f 44a0 	mov.w	r4, #1342177280	@ 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800075c:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000760:	73c3      	strb	r3, [r0, #15]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000762:	f240 1301 	movw	r3, #257	@ 0x101
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000766:	7102      	strb	r2, [r0, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000768:	f44f 7281 	mov.w	r2, #258	@ 0x102
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800076c:	6004      	str	r4, [r0, #0]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800076e:	80c1      	strh	r1, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000770:	f8c0 2009 	str.w	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000774:	f8a0 300d 	strh.w	r3, [r0, #13]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000778:	f000 fb24 	bl	8000dc4 <HAL_PCD_Init>
 800077c:	b108      	cbz	r0, 8000782 <main+0x16e>
 800077e:	b672      	cpsid	i
  while (1)
 8000780:	e7fe      	b.n	8000780 <main+0x16c>
  while (1)
 8000782:	e7fe      	b.n	8000782 <main+0x16e>
 8000784:	40023800 	.word	0x40023800
 8000788:	40020400 	.word	0x40020400
 800078c:	40021800 	.word	0x40021800
 8000790:	40020800 	.word	0x40020800
 8000794:	40020000 	.word	0x40020000
 8000798:	20000508 	.word	0x20000508
 800079c:	40004800 	.word	0x40004800
 80007a0:	20000028 	.word	0x20000028

080007a4 <Error_Handler>:
 80007a4:	b672      	cpsid	i
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <Error_Handler+0x2>

080007a8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <HAL_MspInit+0x2c>)
{
 80007aa:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80007b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80007b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007b6:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80007ba:	9200      	str	r2, [sp, #0]
 80007bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80007c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d0:	b002      	add	sp, #8
 80007d2:	4770      	bx	lr
 80007d4:	40023800 	.word	0x40023800

080007d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b510      	push	{r4, lr}
 80007da:	b0a8      	sub	sp, #160	@ 0xa0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	2100      	movs	r1, #0
{
 80007de:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	9106      	str	r1, [sp, #24]
 80007e6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80007ea:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ee:	f001 fd33 	bl	8002258 <memset>
  if(huart->Instance==USART3)
 80007f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <HAL_UART_MspInit+0x90>)
 80007f4:	6822      	ldr	r2, [r4, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d001      	beq.n	80007fe <HAL_UART_MspInit+0x26>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80007fa:	b028      	add	sp, #160	@ 0xa0
 80007fc:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80007fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000802:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000804:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000806:	f000 fe93 	bl	8001530 <HAL_RCCEx_PeriphCLKConfig>
 800080a:	bb10      	cbnz	r0, 8000852 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800080e:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	a902      	add	r1, sp, #8
 8000812:	4817      	ldr	r0, [pc, #92]	@ (8000870 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000816:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800081a:	641a      	str	r2, [r3, #64]	@ 0x40
 800081c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800081e:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8000822:	9200      	str	r2, [sp, #0]
 8000824:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000828:	f042 0208 	orr.w	r2, r2, #8
 800082c:	631a      	str	r2, [r3, #48]	@ 0x30
 800082e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000830:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000836:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8000858 <HAL_UART_MspInit+0x80>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800083e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000842:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8000860 <HAL_UART_MspInit+0x88>
 8000846:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f000 f981 	bl	8000b50 <HAL_GPIO_Init>
}
 800084e:	b028      	add	sp, #160	@ 0xa0
 8000850:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000852:	f7ff ffa7 	bl	80007a4 <Error_Handler>
 8000856:	e7d9      	b.n	800080c <HAL_UART_MspInit+0x34>
 8000858:	00000300 	.word	0x00000300
 800085c:	00000002 	.word	0x00000002
 8000860:	00000000 	.word	0x00000000
 8000864:	00000003 	.word	0x00000003
 8000868:	40004800 	.word	0x40004800
 800086c:	40023800 	.word	0x40023800
 8000870:	40020c00 	.word	0x40020c00

08000874 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000874:	b530      	push	{r4, r5, lr}
 8000876:	b0ab      	sub	sp, #172	@ 0xac
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	2100      	movs	r1, #0
{
 800087a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	9108      	str	r1, [sp, #32]
 8000882:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000886:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800088a:	f001 fce5 	bl	8002258 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000894:	d001      	beq.n	800089a <HAL_PCD_MspInit+0x26>

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000896:	b02b      	add	sp, #172	@ 0xac
 8000898:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800089a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089e:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80008a0:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a2:	f000 fe45 	bl	8001530 <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d136      	bne.n	8000918 <HAL_PCD_MspInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4c1d      	ldr	r4, [pc, #116]	@ (8000920 <HAL_PCD_MspInit+0xac>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008ac:	f44f 51e8 	mov.w	r1, #7424	@ 0x1d00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	481b      	ldr	r0, [pc, #108]	@ (8000924 <HAL_PCD_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80008be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80008c0:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	e9cd 1204 	strd	r1, r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008cc:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008d2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f000 f93a 	bl	8000b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e0:	2300      	movs	r3, #0
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008e2:	a904      	add	r1, sp, #16
 80008e4:	480f      	ldr	r0, [pc, #60]	@ (8000924 <HAL_PCD_MspInit+0xb0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f000 f930 	bl	8000b50 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80008f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80008f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80008f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80008fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	9b02      	ldr	r3, [sp, #8]
 8000902:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6463      	str	r3, [r4, #68]	@ 0x44
 800090a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800090c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000910:	9303      	str	r3, [sp, #12]
 8000912:	9b03      	ldr	r3, [sp, #12]
}
 8000914:	b02b      	add	sp, #172	@ 0xac
 8000916:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8000918:	f7ff ff44 	bl	80007a4 <Error_Handler>
 800091c:	e7c5      	b.n	80008aa <HAL_PCD_MspInit+0x36>
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler>
 800092a:	bf00      	nop

0800092c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <HardFault_Handler>
 800092e:	bf00      	nop

08000930 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler>
 8000932:	bf00      	nop

08000934 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <BusFault_Handler>
 8000936:	bf00      	nop

08000938 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler>
 800093a:	bf00      	nop

0800093c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 b86c 	b.w	8000a24 <HAL_IncTick>

0800094c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800094c:	2001      	movs	r0, #1
 800094e:	f000 ba2d 	b.w	8000dac <HAL_GPIO_EXTI_IRQHandler>
 8000952:	bf00      	nop

08000954 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000954:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000958:	f000 ba28 	b.w	8000dac <HAL_GPIO_EXTI_IRQHandler>

0800095c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4a03      	ldr	r2, [pc, #12]	@ (800096c <SystemInit+0x10>)
 800095e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000966:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000974:	f7ff fff2 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	@ (80009b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	@ (80009bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f001 fc63 	bl	8002268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a2:	f7ff fe37 	bl	8000614 <main>
  bx  lr    
 80009a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009a8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b4:	080022f0 	.word	0x080022f0
  ldr r2, =_sbss
 80009b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009bc:	20000594 	.word	0x20000594

080009c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC_IRQHandler>
	...

080009c4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	490e      	ldr	r1, [pc, #56]	@ (8000a00 <HAL_InitTick+0x3c>)
 80009c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <HAL_InitTick+0x40>)
{
 80009cc:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ce:	7809      	ldrb	r1, [r1, #0]
{
 80009d0:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d2:	6812      	ldr	r2, [r2, #0]
 80009d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d8:	fbb2 f0f3 	udiv	r0, r2, r3
 80009dc:	f000 f8a2 	bl	8000b24 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e0:	b908      	cbnz	r0, 80009e6 <HAL_InitTick+0x22>
 80009e2:	2c0f      	cmp	r4, #15
 80009e4:	d901      	bls.n	80009ea <HAL_InitTick+0x26>
    return HAL_ERROR;
 80009e6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009e8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ea:	2200      	movs	r2, #0
 80009ec:	4621      	mov	r1, r4
 80009ee:	f04f 30ff 	mov.w	r0, #4294967295
 80009f2:	f000 f84d 	bl	8000a90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f6:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <HAL_InitTick+0x44>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	601c      	str	r4, [r3, #0]
}
 80009fc:	bd10      	pop	{r4, pc}
 80009fe:	bf00      	nop
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008

08000a0c <HAL_Init>:
{
 8000a0c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f000 f82c 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ffd5 	bl	80009c4 <HAL_InitTick>
  HAL_MspInit();
 8000a1a:	f7ff fec5 	bl	80007a8 <HAL_MspInit>
}
 8000a1e:	2000      	movs	r0, #0
 8000a20:	bd08      	pop	{r3, pc}
 8000a22:	bf00      	nop

08000a24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a24:	4a03      	ldr	r2, [pc, #12]	@ (8000a34 <HAL_IncTick+0x10>)
 8000a26:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <HAL_IncTick+0x14>)
 8000a28:	6811      	ldr	r1, [r2, #0]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	440b      	add	r3, r1
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000590 	.word	0x20000590
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a3c:	4b01      	ldr	r3, [pc, #4]	@ (8000a44 <HAL_GetTick+0x8>)
 8000a3e:	6818      	ldr	r0, [r3, #0]
}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000590 	.word	0x20000590

08000a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff fff6 	bl	8000a3c <HAL_GetTick>
 8000a50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	1c63      	adds	r3, r4, #1
 8000a54:	d002      	beq.n	8000a5c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <HAL_Delay+0x20>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	1b40      	subs	r0, r0, r5
 8000a62:	42a0      	cmp	r0, r4
 8000a64:	d3fa      	bcc.n	8000a5c <HAL_Delay+0x14>
  {
  }
}
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4906      	ldr	r1, [pc, #24]	@ (8000a88 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a72:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a76:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a78:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000a82:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a84:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	05fa0000 	.word	0x05fa0000

08000a90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <HAL_NVIC_SetPriority+0x6c>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a98:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa2:	f1be 0f04 	cmp.w	lr, #4
 8000aa6:	bf28      	it	cs
 8000aa8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aac:	f1bc 0f06 	cmp.w	ip, #6
 8000ab0:	d91a      	bls.n	8000ae8 <HAL_NVIC_SetPriority+0x58>
 8000ab2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	fa03 f30c 	lsl.w	r3, r3, ip
 8000abe:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	fa03 f30e 	lsl.w	r3, r3, lr
 8000acc:	ea21 0303 	bic.w	r3, r1, r3
 8000ad0:	fa03 f30c 	lsl.w	r3, r3, ip
 8000ad4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000adc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000ade:	db06      	blt.n	8000aee <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_NVIC_SetPriority+0x70>)
 8000ae2:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ae8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	4694      	mov	ip, r2
 8000aec:	e7e9      	b.n	8000ac2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	f000 000f 	and.w	r0, r0, #15
 8000af2:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <HAL_NVIC_SetPriority+0x74>)
 8000af4:	5413      	strb	r3, [r2, r0]
 8000af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00
 8000b00:	e000e400 	.word	0xe000e400
 8000b04:	e000ed14 	.word	0xe000ed14

08000b08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	db07      	blt.n	8000b1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0c:	f000 011f 	and.w	r1, r0, #31
 8000b10:	2301      	movs	r3, #1
 8000b12:	0940      	lsrs	r0, r0, #5
 8000b14:	4a02      	ldr	r2, [pc, #8]	@ (8000b20 <HAL_NVIC_EnableIRQ+0x18>)
 8000b16:	408b      	lsls	r3, r1
 8000b18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	1e43      	subs	r3, r0, #1
 8000b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b2a:	d301      	bcc.n	8000b30 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b2e:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b30:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	4905      	ldr	r1, [pc, #20]	@ (8000b4c <HAL_SYSTICK_Config+0x28>)
 8000b38:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000b54:	2300      	movs	r3, #0
{
 8000b56:	b085      	sub	sp, #20
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b58:	f04f 0b01 	mov.w	fp, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5c:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	f8df a218 	ldr.w	sl, [pc, #536]	@ 8000d78 <HAL_GPIO_Init+0x228>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b62:	4689      	mov	r9, r1
 8000b64:	e003      	b.n	8000b6e <HAL_GPIO_Init+0x1e>
  for (position = 0; position < GPIO_NUMBER; position++)
 8000b66:	3301      	adds	r3, #1
 8000b68:	2b10      	cmp	r3, #16
 8000b6a:	f000 8091 	beq.w	8000c90 <HAL_GPIO_Init+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8000b6e:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	ea02 0804 	and.w	r8, r2, r4
    if (iocurrent == ioposition)
 8000b76:	43a2      	bics	r2, r4
 8000b78:	d1f5      	bne.n	8000b66 <HAL_GPIO_Init+0x16>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b7a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000b7e:	005a      	lsls	r2, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b80:	2503      	movs	r5, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b82:	f001 0c03 	and.w	ip, r1, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b86:	4095      	lsls	r5, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b88:	f10c 36ff 	add.w	r6, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b8c:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b8e:	2e01      	cmp	r6, #1
 8000b90:	f240 8081 	bls.w	8000c96 <HAL_GPIO_Init+0x146>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b94:	f1bc 0f03 	cmp.w	ip, #3
 8000b98:	f040 80de 	bne.w	8000d58 <HAL_GPIO_Init+0x208>
      temp = GPIOx->MODER;
 8000b9c:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b9e:	fa0c f202 	lsl.w	r2, ip, r2
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba2:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ba6:	ea05 0506 	and.w	r5, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000baa:	ea42 0205 	orr.w	r2, r2, r5
      GPIOx->MODER = temp;
 8000bae:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb0:	d0d9      	beq.n	8000b66 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8000bb6:	f023 0503 	bic.w	r5, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bba:	f003 0603 	and.w	r6, r3, #3
 8000bbe:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000bc4:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bc8:	00b6      	lsls	r6, r6, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8000bce:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8000bd2:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bd6:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bda:	4f64      	ldr	r7, [pc, #400]	@ (8000d6c <HAL_GPIO_Init+0x21c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bdc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000be0:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	9203      	str	r2, [sp, #12]
 8000be4:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000be6:	68aa      	ldr	r2, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000be8:	ea22 020c 	bic.w	r2, r2, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bec:	d027      	beq.n	8000c3e <HAL_GPIO_Init+0xee>
 8000bee:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8000bf2:	42b8      	cmp	r0, r7
 8000bf4:	f000 808c 	beq.w	8000d10 <HAL_GPIO_Init+0x1c0>
 8000bf8:	4f5d      	ldr	r7, [pc, #372]	@ (8000d70 <HAL_GPIO_Init+0x220>)
 8000bfa:	42b8      	cmp	r0, r7
 8000bfc:	f000 808e 	beq.w	8000d1c <HAL_GPIO_Init+0x1cc>
 8000c00:	f8df c178 	ldr.w	ip, [pc, #376]	@ 8000d7c <HAL_GPIO_Init+0x22c>
 8000c04:	4560      	cmp	r0, ip
 8000c06:	f000 808f 	beq.w	8000d28 <HAL_GPIO_Init+0x1d8>
 8000c0a:	f8df c174 	ldr.w	ip, [pc, #372]	@ 8000d80 <HAL_GPIO_Init+0x230>
 8000c0e:	4560      	cmp	r0, ip
 8000c10:	f000 8090 	beq.w	8000d34 <HAL_GPIO_Init+0x1e4>
 8000c14:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 8000d84 <HAL_GPIO_Init+0x234>
 8000c18:	4560      	cmp	r0, ip
 8000c1a:	f000 8091 	beq.w	8000d40 <HAL_GPIO_Init+0x1f0>
 8000c1e:	f8df c168 	ldr.w	ip, [pc, #360]	@ 8000d88 <HAL_GPIO_Init+0x238>
 8000c22:	4560      	cmp	r0, ip
 8000c24:	f000 8092 	beq.w	8000d4c <HAL_GPIO_Init+0x1fc>
 8000c28:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8000d8c <HAL_GPIO_Init+0x23c>
 8000c2c:	4560      	cmp	r0, ip
 8000c2e:	bf0c      	ite	eq
 8000c30:	f04f 0c07 	moveq.w	ip, #7
 8000c34:	f04f 0c08 	movne.w	ip, #8
 8000c38:	fa0c f606 	lsl.w	r6, ip, r6
 8000c3c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c3e:	60aa      	str	r2, [r5, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c40:	02ce      	lsls	r6, r1, #11
        temp = EXTI->RTSR;
 8000c42:	4a4c      	ldr	r2, [pc, #304]	@ (8000d74 <HAL_GPIO_Init+0x224>)
        temp &= ~((uint32_t)iocurrent);
 8000c44:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000c48:	4e4a      	ldr	r6, [pc, #296]	@ (8000d74 <HAL_GPIO_Init+0x224>)
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c4a:	f103 0301 	add.w	r3, r3, #1
        temp = EXTI->RTSR;
 8000c4e:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c50:	bf54      	ite	pl
 8000c52:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000c54:	ea48 0202 	orrmi.w	r2, r8, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c58:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 8000c5a:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8000c5c:	68f2      	ldr	r2, [r6, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000c5e:	4e45      	ldr	r6, [pc, #276]	@ (8000d74 <HAL_GPIO_Init+0x224>)
        temp &= ~((uint32_t)iocurrent);
 8000c60:	bf54      	ite	pl
 8000c62:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000c64:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8000c68:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8000c6a:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c6c:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000c6e:	4e41      	ldr	r6, [pc, #260]	@ (8000d74 <HAL_GPIO_Init+0x224>)
        temp &= ~((uint32_t)iocurrent);
 8000c70:	bf54      	ite	pl
 8000c72:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000c74:	ea48 0202 	orrmi.w	r2, r8, r2

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c78:	03c9      	lsls	r1, r1, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000c7a:	493e      	ldr	r1, [pc, #248]	@ (8000d74 <HAL_GPIO_Init+0x224>)
        EXTI->EMR = temp;
 8000c7c:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 8000c7e:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c80:	bf54      	ite	pl
 8000c82:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000c84:	ea48 0202 	orrmi.w	r2, r8, r2
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c88:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8000c8a:	600a      	str	r2, [r1, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c8c:	f47f af6f 	bne.w	8000b6e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8000c90:	b005      	add	sp, #20
 8000c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8000c96:	6886      	ldr	r6, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c98:	f1bc 0f02 	cmp.w	ip, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c9c:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ca0:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8000ca4:	fa06 f602 	lsl.w	r6, r6, r2
 8000ca8:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8000cac:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cae:	f3c1 1600 	ubfx	r6, r1, #4, #1
        temp = GPIOx->OTYPER;
 8000cb2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb6:	fa06 f603 	lsl.w	r6, r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cba:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cbe:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 8000cc2:	6046      	str	r6, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000cc4:	f8d9 6008 	ldr.w	r6, [r9, #8]
        temp = GPIOx->PUPDR;
 8000cc8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ccc:	fa06 f602 	lsl.w	r6, r6, r2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cd0:	ea0e 0e05 	and.w	lr, lr, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000cd4:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8000cd8:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cda:	f47f af5f 	bne.w	8000b9c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3];
 8000cde:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ce0:	f003 0e07 	and.w	lr, r3, #7
 8000ce4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8000ce8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000cec:	6a37      	ldr	r7, [r6, #32]
 8000cee:	9601      	str	r6, [sp, #4]
 8000cf0:	9700      	str	r7, [sp, #0]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cf2:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000cf4:	f8d9 6010 	ldr.w	r6, [r9, #16]
 8000cf8:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cfc:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000d00:	9f00      	ldr	r7, [sp, #0]
 8000d02:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8000d06:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d08:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3] = temp;
 8000d0c:	623e      	str	r6, [r7, #32]
 8000d0e:	e745      	b.n	8000b9c <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d10:	f04f 0c01 	mov.w	ip, #1
 8000d14:	fa0c f606 	lsl.w	r6, ip, r6
 8000d18:	4332      	orrs	r2, r6
 8000d1a:	e790      	b.n	8000c3e <HAL_GPIO_Init+0xee>
 8000d1c:	f04f 0c02 	mov.w	ip, #2
 8000d20:	fa0c f606 	lsl.w	r6, ip, r6
 8000d24:	4332      	orrs	r2, r6
 8000d26:	e78a      	b.n	8000c3e <HAL_GPIO_Init+0xee>
 8000d28:	f04f 0c03 	mov.w	ip, #3
 8000d2c:	fa0c f606 	lsl.w	r6, ip, r6
 8000d30:	4332      	orrs	r2, r6
 8000d32:	e784      	b.n	8000c3e <HAL_GPIO_Init+0xee>
 8000d34:	f04f 0c04 	mov.w	ip, #4
 8000d38:	fa0c f606 	lsl.w	r6, ip, r6
 8000d3c:	4332      	orrs	r2, r6
 8000d3e:	e77e      	b.n	8000c3e <HAL_GPIO_Init+0xee>
 8000d40:	f04f 0c05 	mov.w	ip, #5
 8000d44:	fa0c f606 	lsl.w	r6, ip, r6
 8000d48:	4332      	orrs	r2, r6
 8000d4a:	e778      	b.n	8000c3e <HAL_GPIO_Init+0xee>
 8000d4c:	f04f 0c06 	mov.w	ip, #6
 8000d50:	fa0c f606 	lsl.w	r6, ip, r6
 8000d54:	4332      	orrs	r2, r6
 8000d56:	e772      	b.n	8000c3e <HAL_GPIO_Init+0xee>
        temp = GPIOx->PUPDR;
 8000d58:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d5a:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d5e:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8000d62:	4096      	lsls	r6, r2
 8000d64:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8000d68:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	e717      	b.n	8000b9c <HAL_GPIO_Init+0x4c>
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40013c00 	.word	0x40013c00
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40021400 	.word	0x40021400
 8000d88:	40021800 	.word	0x40021800
 8000d8c:	40021c00 	.word	0x40021c00

08000d90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d90:	b902      	cbnz	r2, 8000d94 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	6181      	str	r1, [r0, #24]
  }
}
 8000d96:	4770      	bx	lr

08000d98 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d98:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d9a:	ea01 0203 	and.w	r2, r1, r3
 8000d9e:	ea21 0103 	bic.w	r1, r1, r3
 8000da2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000da6:	6181      	str	r1, [r0, #24]
}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000dae:	6951      	ldr	r1, [r2, #20]
 8000db0:	4201      	tst	r1, r0
 8000db2:	d100      	bne.n	8000db6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000db4:	4770      	bx	lr
{
 8000db6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000db8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dba:	f7ff fbc7 	bl	800054c <HAL_GPIO_EXTI_Callback>
  }
}
 8000dbe:	bd08      	pop	{r3, pc}
 8000dc0:	40013c00 	.word	0x40013c00

08000dc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	b082      	sub	sp, #8
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dc8:	b1e8      	cbz	r0, 8000e06 <HAL_PCD_Init+0x42>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dca:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8000dce:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8000dd0:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dd2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d05b      	beq.n	8000e92 <HAL_PCD_Init+0xce>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dda:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000ddc:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8000de0:	4628      	mov	r0, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000de2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 8000de6:	d05f      	beq.n	8000ea8 <HAL_PCD_Init+0xe4>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000de8:	f001 f8d2 	bl	8001f90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dec:	1d25      	adds	r5, r4, #4
 8000dee:	7c23      	ldrb	r3, [r4, #16]
 8000df0:	f88d 3000 	strb.w	r3, [sp]
 8000df4:	6820      	ldr	r0, [r4, #0]
 8000df6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000dfa:	f001 f86d 	bl	8001ed8 <USB_CoreInit>
 8000dfe:	b130      	cbz	r0, 8000e0e <HAL_PCD_Init+0x4a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e00:	2302      	movs	r3, #2
 8000e02:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8000e06:	2501      	movs	r5, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000e08:	4628      	mov	r0, r5
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000e0e:	4601      	mov	r1, r0
 8000e10:	6820      	ldr	r0, [r4, #0]
 8000e12:	f001 f8c5 	bl	8001fa0 <USB_SetCurrentMode>
 8000e16:	4601      	mov	r1, r0
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d1f1      	bne.n	8000e00 <HAL_PCD_Init+0x3c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e1c:	7926      	ldrb	r6, [r4, #4]
 8000e1e:	b306      	cbz	r6, 8000e62 <HAL_PCD_Init+0x9e>
 8000e20:	4623      	mov	r3, r4
 8000e22:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000e24:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
 8000e28:	7511      	strb	r1, [r2, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e2a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e2c:	3101      	adds	r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8000e2e:	f882 c015 	strb.w	ip, [r2, #21]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e32:	42b1      	cmp	r1, r6
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e34:	7610      	strb	r0, [r2, #24]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e36:	e9c2 0007 	strd	r0, r0, [r2, #28]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e3a:	f842 0f24 	str.w	r0, [r2, #36]!
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e3e:	d1f3      	bne.n	8000e28 <HAL_PCD_Init+0x64>
 8000e40:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8000e42:	460a      	mov	r2, r1
    hpcd->OUT_ep[i].num = i;
 8000e44:	f883 1254 	strb.w	r1, [r3, #596]	@ 0x254
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e48:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8000e4a:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e4e:	42b1      	cmp	r1, r6
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e50:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e54:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e58:	e9c3 2297 	strd	r2, r2, [r3, #604]	@ 0x25c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e5c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000e60:	d1f0      	bne.n	8000e44 <HAL_PCD_Init+0x80>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e62:	7c20      	ldrb	r0, [r4, #16]
 8000e64:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000e68:	f88d 0000 	strb.w	r0, [sp]
 8000e6c:	6820      	ldr	r0, [r4, #0]
 8000e6e:	f001 f91b 	bl	80020a8 <USB_DevInit>
 8000e72:	4605      	mov	r5, r0
 8000e74:	2800      	cmp	r0, #0
 8000e76:	d1c3      	bne.n	8000e00 <HAL_PCD_Init+0x3c>
  hpcd->State = HAL_PCD_STATE_READY;
 8000e78:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8000e7a:	7b23      	ldrb	r3, [r4, #12]
  hpcd->USB_Address = 0U;
 8000e7c:	7460      	strb	r0, [r4, #17]
  if (hpcd->Init.lpm_enable == 1U)
 8000e7e:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8000e80:	f884 2495 	strb.w	r2, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 8000e84:	d013      	beq.n	8000eae <HAL_PCD_Init+0xea>
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e86:	6820      	ldr	r0, [r4, #0]
 8000e88:	f001 f9d6 	bl	8002238 <USB_DevDisconnect>
}
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000e92:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8000e96:	f7ff fced 	bl	8000874 <HAL_PCD_MspInit>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e9a:	2303      	movs	r3, #3
  if (USBx == USB_OTG_FS)
 8000e9c:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  __HAL_PCD_DISABLE(hpcd);
 8000ea0:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ea2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 8000ea6:	d19f      	bne.n	8000de8 <HAL_PCD_Init+0x24>
    hpcd->Init.dma_enable = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71a3      	strb	r3, [r4, #6]
 8000eac:	e79c      	b.n	8000de8 <HAL_PCD_Init+0x24>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f000 f802 	bl	8000eb8 <HAL_PCDEx_ActivateLPM>
 8000eb4:	e7e7      	b.n	8000e86 <HAL_PCD_Init+0xc2>
 8000eb6:	bf00      	nop

08000eb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000eb8:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8000eba:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000ebe:	4909      	ldr	r1, [pc, #36]	@ (8000ee4 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ec0:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 8000ec2:	4660      	mov	r0, ip
{
 8000ec4:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 8000ec6:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 8000ec8:	f883 c4cc 	strb.w	ip, [r3, #1228]	@ 0x4cc
  hpcd->lpm_active = 1U;
 8000ecc:	f8c3 44d8 	str.w	r4, [r3, #1240]	@ 0x4d8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000ed0:	6993      	ldr	r3, [r2, #24]
}
 8000ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000ed6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000eda:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000edc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8000ede:	4319      	orrs	r1, r3
 8000ee0:	6551      	str	r1, [r2, #84]	@ 0x54
}
 8000ee2:	4770      	bx	lr
 8000ee4:	10000003 	.word	0x10000003

08000ee8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ee8:	4a02      	ldr	r2, [pc, #8]	@ (8000ef4 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000eea:	6813      	ldr	r3, [r2, #0]
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	4770      	bx	lr
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <HAL_PWREx_EnableOverDrive+0x6c>)
 8000efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000efc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
{
 8000f00:	b530      	push	{r4, r5, lr}
 8000f02:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f08:	4c17      	ldr	r4, [pc, #92]	@ (8000f68 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f18:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f1a:	f7ff fd8f 	bl	8000a3c <HAL_GetTick>
 8000f1e:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f20:	e005      	b.n	8000f2e <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f22:	f7ff fd8b 	bl	8000a3c <HAL_GetTick>
 8000f26:	1b40      	subs	r0, r0, r5
 8000f28:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000f2c:	d817      	bhi.n	8000f5e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	03da      	lsls	r2, r3, #15
 8000f32:	d5f6      	bpl.n	8000f22 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f34:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f36:	4d0c      	ldr	r5, [pc, #48]	@ (8000f68 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f3c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000f3e:	f7ff fd7d 	bl	8000a3c <HAL_GetTick>
 8000f42:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f44:	e005      	b.n	8000f52 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f46:	f7ff fd79 	bl	8000a3c <HAL_GetTick>
 8000f4a:	1b00      	subs	r0, r0, r4
 8000f4c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000f50:	d805      	bhi.n	8000f5e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f52:	686b      	ldr	r3, [r5, #4]
 8000f54:	039b      	lsls	r3, r3, #14
 8000f56:	d5f6      	bpl.n	8000f46 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000f58:	2000      	movs	r0, #0
}
 8000f5a:	b003      	add	sp, #12
 8000f5c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8000f5e:	2003      	movs	r0, #3
}
 8000f60:	b003      	add	sp, #12
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	f000 81e7 	beq.w	8001340 <HAL_RCC_OscConfig+0x3d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f72:	6803      	ldr	r3, [r0, #0]
{
 8000f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f78:	07dd      	lsls	r5, r3, #31
{
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7e:	d535      	bpl.n	8000fec <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f80:	499a      	ldr	r1, [pc, #616]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 8000f82:	688a      	ldr	r2, [r1, #8]
 8000f84:	f002 020c 	and.w	r2, r2, #12
 8000f88:	2a04      	cmp	r2, #4
 8000f8a:	f000 80e0 	beq.w	800114e <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8e:	688a      	ldr	r2, [r1, #8]
 8000f90:	f002 020c 	and.w	r2, r2, #12
 8000f94:	2a08      	cmp	r2, #8
 8000f96:	f000 80d6 	beq.w	8001146 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9a:	6863      	ldr	r3, [r4, #4]
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa0:	d010      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x58>
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80fd 	beq.w	80011a2 <HAL_RCC_OscConfig+0x236>
 8000fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fac:	4b8f      	ldr	r3, [pc, #572]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f000 8185 	beq.w	80012be <HAL_RCC_OscConfig+0x352>
 8000fb4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000fc0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc2:	e004      	b.n	8000fce <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc4:	4a89      	ldr	r2, [pc, #548]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 8000fc6:	6813      	ldr	r3, [r2, #0]
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fce:	f7ff fd35 	bl	8000a3c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd2:	4e86      	ldr	r6, [pc, #536]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8000fd4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	e005      	b.n	8000fe4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fd30 	bl	8000a3c <HAL_GetTick>
 8000fdc:	1b40      	subs	r0, r0, r5
 8000fde:	2864      	cmp	r0, #100	@ 0x64
 8000fe0:	f200 80db 	bhi.w	800119a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe4:	6833      	ldr	r3, [r6, #0]
 8000fe6:	039b      	lsls	r3, r3, #14
 8000fe8:	d5f6      	bpl.n	8000fd8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	079d      	lsls	r5, r3, #30
 8000fee:	d528      	bpl.n	8001042 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ff0:	4a7e      	ldr	r2, [pc, #504]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 8000ff2:	6891      	ldr	r1, [r2, #8]
 8000ff4:	f011 0f0c 	tst.w	r1, #12
 8000ff8:	f000 8089 	beq.w	800110e <HAL_RCC_OscConfig+0x1a2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ffc:	6891      	ldr	r1, [r2, #8]
 8000ffe:	f001 010c 	and.w	r1, r1, #12
 8001002:	2908      	cmp	r1, #8
 8001004:	d07f      	beq.n	8001106 <HAL_RCC_OscConfig+0x19a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001006:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001008:	4d78      	ldr	r5, [pc, #480]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8103 	beq.w	8001216 <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001018:	f7ff fd10 	bl	8000a3c <HAL_GetTick>
 800101c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101e:	e005      	b.n	800102c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001020:	f7ff fd0c 	bl	8000a3c <HAL_GetTick>
 8001024:	1b80      	subs	r0, r0, r6
 8001026:	2802      	cmp	r0, #2
 8001028:	f200 80b7 	bhi.w	800119a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	079f      	lsls	r7, r3, #30
 8001030:	d5f6      	bpl.n	8001020 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	682b      	ldr	r3, [r5, #0]
 8001034:	6922      	ldr	r2, [r4, #16]
 8001036:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800103a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800103e:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	071a      	lsls	r2, r3, #28
 8001044:	d428      	bmi.n	8001098 <HAL_RCC_OscConfig+0x12c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001046:	075e      	lsls	r6, r3, #29
 8001048:	d53d      	bpl.n	80010c6 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104a:	4b68      	ldr	r3, [pc, #416]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 800104c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800104e:	00d5      	lsls	r5, r2, #3
 8001050:	d477      	bmi.n	8001142 <HAL_RCC_OscConfig+0x1d6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8001054:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800105a:	641a      	str	r2, [r3, #64]	@ 0x40
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001066:	4e62      	ldr	r6, [pc, #392]	@ (80011f0 <HAL_RCC_OscConfig+0x284>)
 8001068:	6833      	ldr	r3, [r6, #0]
 800106a:	05d8      	lsls	r0, r3, #23
 800106c:	f140 8085 	bpl.w	800117a <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001070:	68a3      	ldr	r3, [r4, #8]
 8001072:	2b01      	cmp	r3, #1
 8001074:	f000 80e1 	beq.w	800123a <HAL_RCC_OscConfig+0x2ce>
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80a8 	beq.w	80011ce <HAL_RCC_OscConfig+0x262>
 800107e:	2b05      	cmp	r3, #5
 8001080:	4b5a      	ldr	r3, [pc, #360]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 8001082:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001084:	f000 8123 	beq.w	80012ce <HAL_RCC_OscConfig+0x362>
 8001088:	f022 0201 	bic.w	r2, r2, #1
 800108c:	671a      	str	r2, [r3, #112]	@ 0x70
 800108e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001090:	f022 0204 	bic.w	r2, r2, #4
 8001094:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001096:	e0d5      	b.n	8001244 <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001098:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800109a:	4d54      	ldr	r5, [pc, #336]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800109c:	2b00      	cmp	r3, #0
 800109e:	d03f      	beq.n	8001120 <HAL_RCC_OscConfig+0x1b4>
      __HAL_RCC_LSI_ENABLE();
 80010a0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80010a8:	f7ff fcc8 	bl	8000a3c <HAL_GetTick>
 80010ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	e004      	b.n	80010ba <HAL_RCC_OscConfig+0x14e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fcc4 	bl	8000a3c <HAL_GetTick>
 80010b4:	1b80      	subs	r0, r0, r6
 80010b6:	2802      	cmp	r0, #2
 80010b8:	d86f      	bhi.n	800119a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80010bc:	079b      	lsls	r3, r3, #30
 80010be:	d5f7      	bpl.n	80010b0 <HAL_RCC_OscConfig+0x144>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	075e      	lsls	r6, r3, #29
 80010c4:	d4c1      	bmi.n	800104a <HAL_RCC_OscConfig+0xde>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c6:	69a3      	ldr	r3, [r4, #24]
 80010c8:	b1cb      	cbz	r3, 80010fe <HAL_RCC_OscConfig+0x192>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ca:	4d48      	ldr	r5, [pc, #288]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 80010cc:	68aa      	ldr	r2, [r5, #8]
 80010ce:	f002 020c 	and.w	r2, r2, #12
 80010d2:	2a08      	cmp	r2, #8
 80010d4:	f000 80c9 	beq.w	800126a <HAL_RCC_OscConfig+0x2fe>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d8:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010da:	682b      	ldr	r3, [r5, #0]
 80010dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80010e0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e2:	f000 80fc 	beq.w	80012de <HAL_RCC_OscConfig+0x372>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff fca9 	bl	8000a3c <HAL_GetTick>
 80010ea:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ec:	e004      	b.n	80010f8 <HAL_RCC_OscConfig+0x18c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ee:	f7ff fca5 	bl	8000a3c <HAL_GetTick>
 80010f2:	1b00      	subs	r0, r0, r4
 80010f4:	2802      	cmp	r0, #2
 80010f6:	d850      	bhi.n	800119a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	019b      	lsls	r3, r3, #6
 80010fc:	d4f7      	bmi.n	80010ee <HAL_RCC_OscConfig+0x182>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80010fe:	2000      	movs	r0, #0
}
 8001100:	b002      	add	sp, #8
 8001102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001106:	6852      	ldr	r2, [r2, #4]
 8001108:	0251      	lsls	r1, r2, #9
 800110a:	f53f af7c 	bmi.w	8001006 <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110e:	4a37      	ldr	r2, [pc, #220]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	0792      	lsls	r2, r2, #30
 8001114:	d525      	bpl.n	8001162 <HAL_RCC_OscConfig+0x1f6>
 8001116:	68e2      	ldr	r2, [r4, #12]
 8001118:	2a01      	cmp	r2, #1
 800111a:	d022      	beq.n	8001162 <HAL_RCC_OscConfig+0x1f6>
    return HAL_ERROR;
 800111c:	2001      	movs	r0, #1
 800111e:	e7ef      	b.n	8001100 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_LSI_DISABLE();
 8001120:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8001128:	f7ff fc88 	bl	8000a3c <HAL_GetTick>
 800112c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112e:	e004      	b.n	800113a <HAL_RCC_OscConfig+0x1ce>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff fc84 	bl	8000a3c <HAL_GetTick>
 8001134:	1b80      	subs	r0, r0, r6
 8001136:	2802      	cmp	r0, #2
 8001138:	d82f      	bhi.n	800119a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800113c:	079f      	lsls	r7, r3, #30
 800113e:	d4f7      	bmi.n	8001130 <HAL_RCC_OscConfig+0x1c4>
 8001140:	e7be      	b.n	80010c0 <HAL_RCC_OscConfig+0x154>
  FlagStatus pwrclkchanged = RESET;
 8001142:	2500      	movs	r5, #0
 8001144:	e78f      	b.n	8001066 <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001146:	684a      	ldr	r2, [r1, #4]
 8001148:	0251      	lsls	r1, r2, #9
 800114a:	f57f af26 	bpl.w	8000f9a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114e:	4a27      	ldr	r2, [pc, #156]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	0392      	lsls	r2, r2, #14
 8001154:	f57f af4a 	bpl.w	8000fec <HAL_RCC_OscConfig+0x80>
 8001158:	6862      	ldr	r2, [r4, #4]
 800115a:	2a00      	cmp	r2, #0
 800115c:	f47f af46 	bne.w	8000fec <HAL_RCC_OscConfig+0x80>
 8001160:	e7dc      	b.n	800111c <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001162:	4922      	ldr	r1, [pc, #136]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 8001164:	6920      	ldr	r0, [r4, #16]
 8001166:	680a      	ldr	r2, [r1, #0]
 8001168:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800116c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001170:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	071a      	lsls	r2, r3, #28
 8001174:	f57f af67 	bpl.w	8001046 <HAL_RCC_OscConfig+0xda>
 8001178:	e78e      	b.n	8001098 <HAL_RCC_OscConfig+0x12c>
      PWR->CR1 |= PWR_CR1_DBP;
 800117a:	6833      	ldr	r3, [r6, #0]
 800117c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001180:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001182:	f7ff fc5b 	bl	8000a3c <HAL_GetTick>
 8001186:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001188:	6833      	ldr	r3, [r6, #0]
 800118a:	05d9      	lsls	r1, r3, #23
 800118c:	f53f af70 	bmi.w	8001070 <HAL_RCC_OscConfig+0x104>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001190:	f7ff fc54 	bl	8000a3c <HAL_GetTick>
 8001194:	1bc0      	subs	r0, r0, r7
 8001196:	2864      	cmp	r0, #100	@ 0x64
 8001198:	d9f6      	bls.n	8001188 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 800119a:	2003      	movs	r0, #3
}
 800119c:	b002      	add	sp, #8
 800119e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a2:	4d12      	ldr	r5, [pc, #72]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011aa:	602b      	str	r3, [r5, #0]
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011b4:	f7ff fc42 	bl	8000a3c <HAL_GetTick>
 80011b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e004      	b.n	80011c6 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fc3e 	bl	8000a3c <HAL_GetTick>
 80011c0:	1b80      	subs	r0, r0, r6
 80011c2:	2864      	cmp	r0, #100	@ 0x64
 80011c4:	d8e9      	bhi.n	800119a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	682b      	ldr	r3, [r5, #0]
 80011c8:	039f      	lsls	r7, r3, #14
 80011ca:	d4f7      	bmi.n	80011bc <HAL_RCC_OscConfig+0x250>
 80011cc:	e70d      	b.n	8000fea <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ce:	4e07      	ldr	r6, [pc, #28]	@ (80011ec <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d0:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6733      	str	r3, [r6, #112]	@ 0x70
 80011dc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80011de:	f023 0304 	bic.w	r3, r3, #4
 80011e2:	6733      	str	r3, [r6, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80011e4:	f7ff fc2a 	bl	8000a3c <HAL_GetTick>
 80011e8:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x292>
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f4:	f7ff fc22 	bl	8000a3c <HAL_GetTick>
 80011f8:	1bc0      	subs	r0, r0, r7
 80011fa:	4540      	cmp	r0, r8
 80011fc:	d8cd      	bhi.n	800119a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fe:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001200:	079b      	lsls	r3, r3, #30
 8001202:	d4f7      	bmi.n	80011f4 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8001204:	2d00      	cmp	r5, #0
 8001206:	f43f af5e 	beq.w	80010c6 <HAL_RCC_OscConfig+0x15a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800120a:	4a4e      	ldr	r2, [pc, #312]	@ (8001344 <HAL_RCC_OscConfig+0x3d8>)
 800120c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800120e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	e757      	b.n	80010c6 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8001216:	682b      	ldr	r3, [r5, #0]
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800121e:	f7ff fc0d 	bl	8000a3c <HAL_GetTick>
 8001222:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001224:	e004      	b.n	8001230 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fc09 	bl	8000a3c <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	2802      	cmp	r0, #2
 800122e:	d8b4      	bhi.n	800119a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	0799      	lsls	r1, r3, #30
 8001234:	d4f7      	bmi.n	8001226 <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	e703      	b.n	8001042 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123a:	4a42      	ldr	r2, [pc, #264]	@ (8001344 <HAL_RCC_OscConfig+0x3d8>)
 800123c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8001244:	f7ff fbfa 	bl	8000a3c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001248:	4f3e      	ldr	r7, [pc, #248]	@ (8001344 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800124e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	e004      	b.n	800125c <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff fbf3 	bl	8000a3c <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	4540      	cmp	r0, r8
 800125a:	d89e      	bhi.n	800119a <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800125e:	079a      	lsls	r2, r3, #30
 8001260:	d5f7      	bpl.n	8001252 <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 8001262:	2d00      	cmp	r5, #0
 8001264:	f43f af2f 	beq.w	80010c6 <HAL_RCC_OscConfig+0x15a>
 8001268:	e7cf      	b.n	800120a <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800126a:	2b01      	cmp	r3, #1
      pll_config = RCC->PLLCFGR;
 800126c:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800126e:	f43f af55 	beq.w	800111c <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001272:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001276:	69e1      	ldr	r1, [r4, #28]
 8001278:	428b      	cmp	r3, r1
 800127a:	f47f af4f 	bne.w	800111c <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800127e:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	6a21      	ldr	r1, [r4, #32]
 8001284:	428b      	cmp	r3, r1
 8001286:	f47f af49 	bne.w	800111c <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800128a:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800128e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001290:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001292:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001296:	f47f af41 	bne.w	800111c <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800129a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800129c:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 80012a0:	085b      	lsrs	r3, r3, #1
 80012a2:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012a4:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80012a8:	f47f af38 	bne.w	800111c <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80012ae:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012b2:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 80012b6:	bf14      	ite	ne
 80012b8:	2001      	movne	r0, #1
 80012ba:	2000      	moveq	r0, #0
 80012bc:	e720      	b.n	8001100 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012be:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80012ca:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012cc:	e67f      	b.n	8000fce <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ce:	f042 0204 	orr.w	r2, r2, #4
 80012d2:	671a      	str	r2, [r3, #112]	@ 0x70
 80012d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012dc:	e7b2      	b.n	8001244 <HAL_RCC_OscConfig+0x2d8>
        tickstart = HAL_GetTick();
 80012de:	f7ff fbad 	bl	8000a3c <HAL_GetTick>
 80012e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e4:	e005      	b.n	80012f2 <HAL_RCC_OscConfig+0x386>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e6:	f7ff fba9 	bl	8000a3c <HAL_GetTick>
 80012ea:	1b80      	subs	r0, r0, r6
 80012ec:	2802      	cmp	r0, #2
 80012ee:	f63f af54 	bhi.w	800119a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f2:	682b      	ldr	r3, [r5, #0]
 80012f4:	0199      	lsls	r1, r3, #6
 80012f6:	d4f6      	bmi.n	80012e6 <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80012fa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80012fc:	0852      	lsrs	r2, r2, #1
 80012fe:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001302:	3a01      	subs	r2, #1
 8001304:	430b      	orrs	r3, r1
 8001306:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800130c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001310:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001314:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001318:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001320:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001322:	f7ff fb8b 	bl	8000a3c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	4d07      	ldr	r5, [pc, #28]	@ (8001344 <HAL_RCC_OscConfig+0x3d8>)
        tickstart = HAL_GetTick();
 8001328:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132a:	e005      	b.n	8001338 <HAL_RCC_OscConfig+0x3cc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff fb86 	bl	8000a3c <HAL_GetTick>
 8001330:	1b00      	subs	r0, r0, r4
 8001332:	2802      	cmp	r0, #2
 8001334:	f63f af31 	bhi.w	800119a <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	019a      	lsls	r2, r3, #6
 800133c:	d5f6      	bpl.n	800132c <HAL_RCC_OscConfig+0x3c0>
 800133e:	e6de      	b.n	80010fe <HAL_RCC_OscConfig+0x192>
    return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
}
 8001342:	4770      	bx	lr
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001348:	4916      	ldr	r1, [pc, #88]	@ (80013a4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800134a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800134c:	688b      	ldr	r3, [r1, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b04      	cmp	r3, #4
 8001354:	d01b      	beq.n	800138e <HAL_RCC_GetSysClockFreq+0x46>
 8001356:	2b08      	cmp	r3, #8
 8001358:	d001      	beq.n	800135e <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800135a:	4813      	ldr	r0, [pc, #76]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800135c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800135e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001360:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001362:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001366:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001368:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
 800136c:	d111      	bne.n	8001392 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800136e:	480e      	ldr	r0, [pc, #56]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x60>)
 8001370:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001374:	fba1 0100 	umull	r0, r1, r1, r0
 8001378:	f7fe ff52 	bl	8000220 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001384:	3301      	adds	r3, #1
 8001386:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001388:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800138c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800138e:	4807      	ldr	r0, [pc, #28]	@ (80013ac <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001390:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <HAL_RCC_GetSysClockFreq+0x64>)
 8001394:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001398:	2300      	movs	r3, #0
 800139a:	fba1 0100 	umull	r0, r1, r1, r0
 800139e:	f7fe ff3f 	bl	8000220 <__aeabi_uldivmod>
 80013a2:	e7eb      	b.n	800137c <HAL_RCC_GetSysClockFreq+0x34>
 80013a4:	40023800 	.word	0x40023800
 80013a8:	00f42400 	.word	0x00f42400
 80013ac:	007a1200 	.word	0x007a1200

080013b0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80013b0:	2800      	cmp	r0, #0
 80013b2:	f000 808c 	beq.w	80014ce <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b6:	4a49      	ldr	r2, [pc, #292]	@ (80014dc <HAL_RCC_ClockConfig+0x12c>)
 80013b8:	6813      	ldr	r3, [r2, #0]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	428b      	cmp	r3, r1
{
 80013c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c4:	4604      	mov	r4, r0
 80013c6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013c8:	d20c      	bcs.n	80013e4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	f023 030f 	bic.w	r3, r3, #15
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	428b      	cmp	r3, r1
 80013dc:	d002      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80013de:	2001      	movs	r0, #1
}
 80013e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	0798      	lsls	r0, r3, #30
 80013e8:	d514      	bpl.n	8001414 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ea:	0759      	lsls	r1, r3, #29
 80013ec:	d504      	bpl.n	80013f8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ee:	493c      	ldr	r1, [pc, #240]	@ (80014e0 <HAL_RCC_ClockConfig+0x130>)
 80013f0:	688a      	ldr	r2, [r1, #8]
 80013f2:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80013f6:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	071a      	lsls	r2, r3, #28
 80013fa:	d504      	bpl.n	8001406 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013fc:	4938      	ldr	r1, [pc, #224]	@ (80014e0 <HAL_RCC_ClockConfig+0x130>)
 80013fe:	688a      	ldr	r2, [r1, #8]
 8001400:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8001404:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001406:	4936      	ldr	r1, [pc, #216]	@ (80014e0 <HAL_RCC_ClockConfig+0x130>)
 8001408:	68a0      	ldr	r0, [r4, #8]
 800140a:	688a      	ldr	r2, [r1, #8]
 800140c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001410:	4302      	orrs	r2, r0
 8001412:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001414:	07df      	lsls	r7, r3, #31
 8001416:	d520      	bpl.n	800145a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001418:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b31      	ldr	r3, [pc, #196]	@ (80014e0 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001420:	d057      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001422:	2a02      	cmp	r2, #2
 8001424:	d050      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	0799      	lsls	r1, r3, #30
 8001428:	d5d9      	bpl.n	80013de <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142a:	4e2d      	ldr	r6, [pc, #180]	@ (80014e0 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001430:	68b3      	ldr	r3, [r6, #8]
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	4313      	orrs	r3, r2
 8001438:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800143a:	f7ff faff 	bl	8000a3c <HAL_GetTick>
 800143e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001440:	e004      	b.n	800144c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001442:	f7ff fafb 	bl	8000a3c <HAL_GetTick>
 8001446:	1bc0      	subs	r0, r0, r7
 8001448:	4540      	cmp	r0, r8
 800144a:	d845      	bhi.n	80014d8 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144c:	68b3      	ldr	r3, [r6, #8]
 800144e:	6862      	ldr	r2, [r4, #4]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001458:	d1f3      	bne.n	8001442 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800145a:	4a20      	ldr	r2, [pc, #128]	@ (80014dc <HAL_RCC_ClockConfig+0x12c>)
 800145c:	6813      	ldr	r3, [r2, #0]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	42ab      	cmp	r3, r5
 8001464:	d909      	bls.n	800147a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	f023 030f 	bic.w	r3, r3, #15
 800146c:	432b      	orrs	r3, r5
 800146e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	42ab      	cmp	r3, r5
 8001478:	d1b1      	bne.n	80013de <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	075a      	lsls	r2, r3, #29
 800147e:	d506      	bpl.n	800148e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001480:	4917      	ldr	r1, [pc, #92]	@ (80014e0 <HAL_RCC_ClockConfig+0x130>)
 8001482:	68e0      	ldr	r0, [r4, #12]
 8001484:	688a      	ldr	r2, [r1, #8]
 8001486:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800148a:	4302      	orrs	r2, r0
 800148c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148e:	071b      	lsls	r3, r3, #28
 8001490:	d507      	bpl.n	80014a2 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001492:	4a13      	ldr	r2, [pc, #76]	@ (80014e0 <HAL_RCC_ClockConfig+0x130>)
 8001494:	6921      	ldr	r1, [r4, #16]
 8001496:	6893      	ldr	r3, [r2, #8]
 8001498:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800149c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014a0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a2:	f7ff ff51 	bl	8001348 <HAL_RCC_GetSysClockFreq>
 80014a6:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <HAL_RCC_ClockConfig+0x130>)
 80014a8:	4c0e      	ldr	r4, [pc, #56]	@ (80014e4 <HAL_RCC_ClockConfig+0x134>)
 80014aa:	4603      	mov	r3, r0
 80014ac:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 80014ae:	480e      	ldr	r0, [pc, #56]	@ (80014e8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014b0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80014b4:	490d      	ldr	r1, [pc, #52]	@ (80014ec <HAL_RCC_ClockConfig+0x13c>)
  HAL_InitTick(uwTickPrio);
 80014b6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014b8:	5ca2      	ldrb	r2, [r4, r2]
 80014ba:	40d3      	lsrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80014be:	f7ff fa81 	bl	80009c4 <HAL_InitTick>
  return HAL_OK;
 80014c2:	2000      	movs	r0, #0
}
 80014c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c8:	0198      	lsls	r0, r3, #6
 80014ca:	d4ae      	bmi.n	800142a <HAL_RCC_ClockConfig+0x7a>
 80014cc:	e787      	b.n	80013de <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
}
 80014d0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	039e      	lsls	r6, r3, #14
 80014d4:	d4a9      	bmi.n	800142a <HAL_RCC_ClockConfig+0x7a>
 80014d6:	e782      	b.n	80013de <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80014d8:	2003      	movs	r0, #3
 80014da:	e781      	b.n	80013e0 <HAL_RCC_ClockConfig+0x30>
 80014dc:	40023c00 	.word	0x40023c00
 80014e0:	40023800 	.word	0x40023800
 80014e4:	080022d0 	.word	0x080022d0
 80014e8:	20000008 	.word	0x20000008
 80014ec:	20000000 	.word	0x20000000

080014f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80014f2:	4905      	ldr	r1, [pc, #20]	@ (8001508 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014f8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014fc:	6808      	ldr	r0, [r1, #0]
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
}
 8001500:	40d8      	lsrs	r0, r3
 8001502:	4770      	bx	lr
 8001504:	40023800 	.word	0x40023800
 8001508:	20000000 	.word	0x20000000
 800150c:	080022c8 	.word	0x080022c8

08001510 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8001512:	4905      	ldr	r1, [pc, #20]	@ (8001528 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	4a05      	ldr	r2, [pc, #20]	@ (800152c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001518:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800151c:	6808      	ldr	r0, [r1, #0]
 800151e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001520:	40d8      	lsrs	r0, r3
 8001522:	4770      	bx	lr
 8001524:	40023800 	.word	0x40023800
 8001528:	20000000 	.word	0x20000000
 800152c:	080022c8 	.word	0x080022c8

08001530 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001530:	6803      	ldr	r3, [r0, #0]
{
 8001532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001536:	f013 0601 	ands.w	r6, r3, #1
{
 800153a:	b083      	sub	sp, #12
 800153c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800153e:	d00b      	beq.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001540:	4aa2      	ldr	r2, [pc, #648]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001542:	6891      	ldr	r1, [r2, #8]
 8001544:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8001548:	6091      	str	r1, [r2, #8]
 800154a:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800154c:	6891      	ldr	r1, [r2, #8]
 800154e:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001550:	fab6 f686 	clz	r6, r6
 8001554:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001556:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001558:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800155c:	d010      	beq.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800155e:	499b      	ldr	r1, [pc, #620]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001560:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8001562:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001566:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800156a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800156e:	ea42 0205 	orr.w	r2, r2, r5
 8001572:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001576:	f000 81be 	beq.w	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800157a:	fab5 f585 	clz	r5, r5
 800157e:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001580:	02d9      	lsls	r1, r3, #11
 8001582:	d510      	bpl.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001584:	4891      	ldr	r0, [pc, #580]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001586:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001588:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800158c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001590:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8001594:	ea42 0201 	orr.w	r2, r2, r1
 8001598:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800159c:	f000 81ae 	beq.w	80018fc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80015a0:	2900      	cmp	r1, #0
 80015a2:	bf08      	it	eq
 80015a4:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015a6:	069a      	lsls	r2, r3, #26
 80015a8:	f100 8160 	bmi.w	800186c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80015ac:	06da      	lsls	r2, r3, #27
 80015ae:	d50c      	bpl.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80015b0:	4a86      	ldr	r2, [pc, #536]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80015b2:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80015b6:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80015ba:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80015be:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80015c2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80015c4:	4301      	orrs	r1, r0
 80015c6:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015ca:	045f      	lsls	r7, r3, #17
 80015cc:	d508      	bpl.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015ce:	497f      	ldr	r1, [pc, #508]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80015d0:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80015d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80015d6:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80015da:	4302      	orrs	r2, r0
 80015dc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80015e0:	0418      	lsls	r0, r3, #16
 80015e2:	d508      	bpl.n	80015f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80015e4:	4979      	ldr	r1, [pc, #484]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80015e6:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80015e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80015ec:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80015f0:	4302      	orrs	r2, r0
 80015f2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80015f6:	03d9      	lsls	r1, r3, #15
 80015f8:	d508      	bpl.n	800160c <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015fa:	4974      	ldr	r1, [pc, #464]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80015fc:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80015fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8001602:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8001606:	4302      	orrs	r2, r0
 8001608:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800160c:	065a      	lsls	r2, r3, #25
 800160e:	d508      	bpl.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001610:	496e      	ldr	r1, [pc, #440]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001612:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001614:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8001618:	f022 0203 	bic.w	r2, r2, #3
 800161c:	4302      	orrs	r2, r0
 800161e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001622:	061f      	lsls	r7, r3, #24
 8001624:	d508      	bpl.n	8001638 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001626:	4969      	ldr	r1, [pc, #420]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001628:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800162a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800162e:	f022 020c 	bic.w	r2, r2, #12
 8001632:	4302      	orrs	r2, r0
 8001634:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001638:	05d8      	lsls	r0, r3, #23
 800163a:	d508      	bpl.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800163c:	4963      	ldr	r1, [pc, #396]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800163e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8001640:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8001644:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8001648:	4302      	orrs	r2, r0
 800164a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800164e:	0599      	lsls	r1, r3, #22
 8001650:	d508      	bpl.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001652:	495e      	ldr	r1, [pc, #376]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001654:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8001656:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800165a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800165e:	4302      	orrs	r2, r0
 8001660:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001664:	055a      	lsls	r2, r3, #21
 8001666:	d508      	bpl.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001668:	4958      	ldr	r1, [pc, #352]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800166a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800166c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8001670:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001674:	4302      	orrs	r2, r0
 8001676:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800167a:	051f      	lsls	r7, r3, #20
 800167c:	d508      	bpl.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800167e:	4953      	ldr	r1, [pc, #332]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001680:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8001682:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8001686:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800168a:	4302      	orrs	r2, r0
 800168c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001690:	04d8      	lsls	r0, r3, #19
 8001692:	d508      	bpl.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001694:	494d      	ldr	r1, [pc, #308]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001696:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8001698:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800169c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80016a0:	4302      	orrs	r2, r0
 80016a2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80016a6:	0499      	lsls	r1, r3, #18
 80016a8:	d508      	bpl.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80016aa:	4948      	ldr	r1, [pc, #288]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80016ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80016b2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80016b6:	4302      	orrs	r2, r0
 80016b8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80016bc:	029a      	lsls	r2, r3, #10
 80016be:	d50c      	bpl.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80016c0:	4942      	ldr	r1, [pc, #264]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80016c2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80016c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80016c8:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80016cc:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 80016d0:	bf08      	it	eq
 80016d2:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80016d4:	4302      	orrs	r2, r0
 80016d6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80016da:	035f      	lsls	r7, r3, #13
 80016dc:	d508      	bpl.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80016de:	493b      	ldr	r1, [pc, #236]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80016e0:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80016e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80016e6:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016ea:	4302      	orrs	r2, r0
 80016ec:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80016f0:	0218      	lsls	r0, r3, #8
 80016f2:	d508      	bpl.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80016f4:	4935      	ldr	r1, [pc, #212]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80016f6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80016f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80016fc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001700:	4302      	orrs	r2, r0
 8001702:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001706:	0159      	lsls	r1, r3, #5
 8001708:	d44d      	bmi.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800170a:	b90e      	cbnz	r6, 8001710 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800170c:	019a      	lsls	r2, r3, #6
 800170e:	d544      	bpl.n	800179a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001710:	4e2e      	ldr	r6, [pc, #184]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001712:	6833      	ldr	r3, [r6, #0]
 8001714:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001718:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800171a:	f7ff f98f 	bl	8000a3c <HAL_GetTick>
 800171e:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001720:	e005      	b.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001722:	f7ff f98b 	bl	8000a3c <HAL_GetTick>
 8001726:	1bc3      	subs	r3, r0, r7
 8001728:	2b64      	cmp	r3, #100	@ 0x64
 800172a:	f200 809b 	bhi.w	8001864 <HAL_RCCEx_PeriphCLKConfig+0x334>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800172e:	6833      	ldr	r3, [r6, #0]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	d4f6      	bmi.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x1f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	07df      	lsls	r7, r3, #31
 8001738:	d50d      	bpl.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x226>
 800173a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800173c:	b95a      	cbnz	r2, 8001756 <HAL_RCCEx_PeriphCLKConfig+0x226>
      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800173e:	68a2      	ldr	r2, [r4, #8]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001740:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8001744:	6860      	ldr	r0, [r4, #4]
 8001746:	0712      	lsls	r2, r2, #28
 8001748:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800174c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8001750:	430a      	orrs	r2, r1
 8001752:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001756:	0318      	lsls	r0, r3, #12
 8001758:	d504      	bpl.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800175a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800175c:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8001760:	f000 80d9 	beq.w	8001916 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8001764:	02d9      	lsls	r1, r3, #11
 8001766:	d504      	bpl.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x242>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001768:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800176a:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800176e:	f000 80d2 	beq.w	8001916 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001772:	019a      	lsls	r2, r3, #6
 8001774:	f100 80c4 	bmi.w	8001900 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001778:	4e14      	ldr	r6, [pc, #80]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800177a:	6833      	ldr	r3, [r6, #0]
 800177c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001780:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001782:	f7ff f95b 	bl	8000a3c <HAL_GetTick>
 8001786:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001788:	e004      	b.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x264>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800178a:	f7ff f957 	bl	8000a3c <HAL_GetTick>
 800178e:	1bc0      	subs	r0, r0, r7
 8001790:	2864      	cmp	r0, #100	@ 0x64
 8001792:	d867      	bhi.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x334>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001794:	6833      	ldr	r3, [r6, #0]
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	d5f7      	bpl.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800179a:	2d01      	cmp	r5, #1
 800179c:	d00d      	beq.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x28a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800179e:	2000      	movs	r0, #0
}
 80017a0:	b003      	add	sp, #12
 80017a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80017a6:	4909      	ldr	r1, [pc, #36]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80017a8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80017aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80017ae:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80017b2:	4302      	orrs	r2, r0
 80017b4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
 80017b8:	e7a7      	b.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    __HAL_RCC_PLLSAI_DISABLE();
 80017ba:	4d04      	ldr	r5, [pc, #16]	@ (80017cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80017c4:	f7ff f93a 	bl	8000a3c <HAL_GetTick>
 80017c8:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80017ca:	e006      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80017cc:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80017d0:	f7ff f934 	bl	8000a3c <HAL_GetTick>
 80017d4:	1b80      	subs	r0, r0, r6
 80017d6:	2864      	cmp	r0, #100	@ 0x64
 80017d8:	d844      	bhi.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x334>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80017da:	682b      	ldr	r3, [r5, #0]
 80017dc:	009f      	lsls	r7, r3, #2
 80017de:	d4f7      	bmi.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	0318      	lsls	r0, r3, #12
 80017e4:	f140 80cb 	bpl.w	800197e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80017e8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	f040 80c7 	bne.w	800197e <HAL_RCCEx_PeriphCLKConfig+0x44e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80017f0:	4967      	ldr	r1, [pc, #412]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80017f2:	e9d4 5204 	ldrd	r5, r2, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80017f6:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80017fa:	0612      	lsls	r2, r2, #24
 80017fc:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 8001800:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001804:	4302      	orrs	r2, r0
 8001806:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800180a:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800180e:	6a20      	ldr	r0, [r4, #32]
 8001810:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8001814:	3801      	subs	r0, #1
 8001816:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800181a:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800181e:	029a      	lsls	r2, r3, #10
 8001820:	d510      	bpl.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8001822:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8001824:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001828:	d10c      	bne.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x314>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800182a:	4959      	ldr	r1, [pc, #356]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800182c:	69a3      	ldr	r3, [r4, #24]
 800182e:	6920      	ldr	r0, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001830:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 800183a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800183e:	4313      	orrs	r3, r2
 8001840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8001844:	4c52      	ldr	r4, [pc, #328]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800184c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800184e:	f7ff f8f5 	bl	8000a3c <HAL_GetTick>
 8001852:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	d4a1      	bmi.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x26e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800185a:	f7ff f8ef 	bl	8000a3c <HAL_GetTick>
 800185e:	1b40      	subs	r0, r0, r5
 8001860:	2864      	cmp	r0, #100	@ 0x64
 8001862:	d9f7      	bls.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x324>
        return HAL_TIMEOUT;
 8001864:	2003      	movs	r0, #3
}
 8001866:	b003      	add	sp, #12
 8001868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	4b48      	ldr	r3, [pc, #288]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
    PWR->CR1 |= PWR_CR1_DBP;
 800186e:	4f49      	ldr	r7, [pc, #292]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x464>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001872:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001888:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800188a:	f7ff f8d7 	bl	8000a3c <HAL_GetTick>
 800188e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001890:	e005      	b.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff f8d3 	bl	8000a3c <HAL_GetTick>
 8001896:	eba0 0008 	sub.w	r0, r0, r8
 800189a:	2864      	cmp	r0, #100	@ 0x64
 800189c:	d8e2      	bhi.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x334>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	05db      	lsls	r3, r3, #23
 80018a2:	d5f6      	bpl.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x362>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018a4:	4f3a      	ldr	r7, [pc, #232]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018aa:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 80018ae:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 80018b2:	d010      	beq.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 80018b4:	428a      	cmp	r2, r1
 80018b6:	d00e      	beq.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80018ba:	6f38      	ldr	r0, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80018c0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80018c4:	6738      	str	r0, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018c6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80018c8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80018cc:	6738      	str	r0, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 80018ce:	673a      	str	r2, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018d0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018d2:	07d0      	lsls	r0, r2, #31
 80018d4:	d43f      	bmi.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x426>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018d6:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 80018da:	d033      	beq.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80018dc:	492c      	ldr	r1, [pc, #176]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80018de:	688a      	ldr	r2, [r1, #8]
 80018e0:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80018e4:	608a      	str	r2, [r1, #8]
 80018e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80018e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ec:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80018ee:	430b      	orrs	r3, r1
 80018f0:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	e65a      	b.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
  uint32_t pllsaiused = 0;
 80018f6:	2500      	movs	r5, #0
      plli2sused = 1;
 80018f8:	2601      	movs	r6, #1
 80018fa:	e641      	b.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 80018fc:	2601      	movs	r6, #1
 80018fe:	e652      	b.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001900:	1d21      	adds	r1, r4, #4
 8001902:	c90e      	ldmia	r1, {r1, r2, r3}
 8001904:	061b      	lsls	r3, r3, #24
 8001906:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800190a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800190e:	4a20      	ldr	r2, [pc, #128]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001910:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8001914:	e730      	b.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x248>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001916:	491e      	ldr	r1, [pc, #120]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8001918:	68e2      	ldr	r2, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800191a:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800191e:	6866      	ldr	r6, [r4, #4]
 8001920:	0612      	lsls	r2, r2, #24
 8001922:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8001926:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
 800192a:	4302      	orrs	r2, r0
 800192c:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001930:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8001934:	69e2      	ldr	r2, [r4, #28]
 8001936:	f020 001f 	bic.w	r0, r0, #31
 800193a:	3a01      	subs	r2, #1
 800193c:	4302      	orrs	r2, r0
 800193e:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 8001942:	e716      	b.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001944:	4812      	ldr	r0, [pc, #72]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001946:	4914      	ldr	r1, [pc, #80]	@ (8001998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001948:	6882      	ldr	r2, [r0, #8]
 800194a:	4019      	ands	r1, r3
 800194c:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8001950:	430a      	orrs	r2, r1
 8001952:	6082      	str	r2, [r0, #8]
 8001954:	e7c7      	b.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        tickstart = HAL_GetTick();
 8001956:	f7ff f871 	bl	8000a3c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800195e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e006      	b.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x440>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff f86b 	bl	8000a3c <HAL_GetTick>
 8001966:	eba0 0008 	sub.w	r0, r0, r8
 800196a:	4548      	cmp	r0, r9
 800196c:	f63f af7a 	bhi.w	8001864 <HAL_RCCEx_PeriphCLKConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001972:	0799      	lsls	r1, r3, #30
 8001974:	d5f5      	bpl.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x432>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001976:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001978:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 800197c:	e7ab      	b.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800197e:	02d9      	lsls	r1, r3, #11
 8001980:	f57f af4d 	bpl.w	800181e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001984:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001986:	2a00      	cmp	r2, #0
 8001988:	f47f af49 	bne.w	800181e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 800198c:	e730      	b.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000
 8001998:	0ffffcff 	.word	0x0ffffcff

0800199c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800199c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800199e:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019a6:	e842 3100 	strex	r1, r3, [r2]
 80019aa:	2900      	cmp	r1, #0
 80019ac:	d1f7      	bne.n	800199e <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019ae:	f102 0308 	add.w	r3, r2, #8
 80019b2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019ba:	f102 0c08 	add.w	ip, r2, #8
 80019be:	e84c 3100 	strex	r1, r3, [ip]
 80019c2:	2900      	cmp	r1, #0
 80019c4:	d1f3      	bne.n	80019ae <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019c6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d006      	beq.n	80019da <UART_EndRxTransfer+0x3e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019cc:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80019ce:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80019d0:	6683      	str	r3, [r0, #104]	@ 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80019d2:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019d6:	6603      	str	r3, [r0, #96]	@ 0x60
}
 80019d8:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019da:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019de:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019e2:	e842 3100 	strex	r1, r3, [r2]
 80019e6:	2900      	cmp	r1, #0
 80019e8:	d0f0      	beq.n	80019cc <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019ea:	e852 3f00 	ldrex	r3, [r2]
 80019ee:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019f2:	e842 3100 	strex	r1, r3, [r2]
 80019f6:	2900      	cmp	r1, #0
 80019f8:	d1ef      	bne.n	80019da <UART_EndRxTransfer+0x3e>
 80019fa:	e7e7      	b.n	80019cc <UART_EndRxTransfer+0x30>

080019fc <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019fc:	6901      	ldr	r1, [r0, #16]
 80019fe:	6882      	ldr	r2, [r0, #8]
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
 8001a02:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a04:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a06:	430a      	orrs	r2, r1
 8001a08:	69c0      	ldr	r0, [r0, #28]
 8001a0a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a0c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a0e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a10:	4987      	ldr	r1, [pc, #540]	@ (8001c30 <UART_SetConfig+0x234>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a12:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a14:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a16:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a1c:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a1e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a20:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8001a24:	4329      	orrs	r1, r5
 8001a26:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001a28:	6a21      	ldr	r1, [r4, #32]
 8001a2a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a2c:	6899      	ldr	r1, [r3, #8]
 8001a2e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8001a32:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a34:	497f      	ldr	r1, [pc, #508]	@ (8001c34 <UART_SetConfig+0x238>)
 8001a36:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a38:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a3a:	d03f      	beq.n	8001abc <UART_SetConfig+0xc0>
 8001a3c:	4a7e      	ldr	r2, [pc, #504]	@ (8001c38 <UART_SetConfig+0x23c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d017      	beq.n	8001a72 <UART_SetConfig+0x76>
 8001a42:	4a7e      	ldr	r2, [pc, #504]	@ (8001c3c <UART_SetConfig+0x240>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	f000 80ad 	beq.w	8001ba4 <UART_SetConfig+0x1a8>
 8001a4a:	4a7d      	ldr	r2, [pc, #500]	@ (8001c40 <UART_SetConfig+0x244>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	f000 80b4 	beq.w	8001bba <UART_SetConfig+0x1be>
 8001a52:	4a7c      	ldr	r2, [pc, #496]	@ (8001c44 <UART_SetConfig+0x248>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d073      	beq.n	8001b40 <UART_SetConfig+0x144>
 8001a58:	4a7b      	ldr	r2, [pc, #492]	@ (8001c48 <UART_SetConfig+0x24c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d03d      	beq.n	8001ada <UART_SetConfig+0xde>
 8001a5e:	4a7b      	ldr	r2, [pc, #492]	@ (8001c4c <UART_SetConfig+0x250>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	f000 80c1 	beq.w	8001be8 <UART_SetConfig+0x1ec>
 8001a66:	4a7a      	ldr	r2, [pc, #488]	@ (8001c50 <UART_SetConfig+0x254>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	f000 80cc 	beq.w	8001c06 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 8001a6e:	2001      	movs	r0, #1
 8001a70:	e04d      	b.n	8001b0e <UART_SetConfig+0x112>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a72:	4b78      	ldr	r3, [pc, #480]	@ (8001c54 <UART_SetConfig+0x258>)
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d8f6      	bhi.n	8001a6e <UART_SetConfig+0x72>
 8001a80:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <UART_SetConfig+0x8c>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001b57 	.word	0x08001b57
 8001a8c:	08001a6f 	.word	0x08001a6f
 8001a90:	08001a6f 	.word	0x08001a6f
 8001a94:	08001a6f 	.word	0x08001a6f
 8001a98:	08001b1d 	.word	0x08001b1d
 8001a9c:	08001a6f 	.word	0x08001a6f
 8001aa0:	08001a6f 	.word	0x08001a6f
 8001aa4:	08001a6f 	.word	0x08001a6f
 8001aa8:	08001aeb 	.word	0x08001aeb
 8001aac:	08001a6f 	.word	0x08001a6f
 8001ab0:	08001a6f 	.word	0x08001a6f
 8001ab4:	08001a6f 	.word	0x08001a6f
 8001ab8:	08001acf 	.word	0x08001acf
 8001abc:	4b65      	ldr	r3, [pc, #404]	@ (8001c54 <UART_SetConfig+0x258>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d00f      	beq.n	8001aea <UART_SetConfig+0xee>
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d12e      	bne.n	8001b2c <UART_SetConfig+0x130>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ace:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001ad2:	d05e      	beq.n	8001b92 <UART_SetConfig+0x196>
        pclk = (uint32_t) LSE_VALUE;
 8001ad4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ad8:	e00b      	b.n	8001af2 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ada:	4b5e      	ldr	r3, [pc, #376]	@ (8001c54 <UART_SetConfig+0x258>)
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ae8:	d115      	bne.n	8001b16 <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aea:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001aee:	d03a      	beq.n	8001b66 <UART_SetConfig+0x16a>
        pclk = (uint32_t) HSI_VALUE;
 8001af0:	4859      	ldr	r0, [pc, #356]	@ (8001c58 <UART_SetConfig+0x25c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001af2:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001af4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001af8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001afc:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b00:	f1a0 0310 	sub.w	r3, r0, #16
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d8b2      	bhi.n	8001a6e <UART_SetConfig+0x72>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 8001b0c:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8001b14:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b16:	f200 8085 	bhi.w	8001c24 <UART_SetConfig+0x228>
 8001b1a:	b14b      	cbz	r3, 8001b30 <UART_SetConfig+0x134>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b1c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001b20:	d03a      	beq.n	8001b98 <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b22:	f7ff fc11 	bl	8001348 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d0f0      	beq.n	8001b0c <UART_SetConfig+0x110>
 8001b2a:	e7e2      	b.n	8001af2 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d0f5      	beq.n	8001b1c <UART_SetConfig+0x120>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b30:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001b34:	d04d      	beq.n	8001bd2 <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b36:	f7ff fceb 	bl	8001510 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d0e6      	beq.n	8001b0c <UART_SetConfig+0x110>
 8001b3e:	e7d8      	b.n	8001af2 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b40:	4b44      	ldr	r3, [pc, #272]	@ (8001c54 <UART_SetConfig+0x258>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b4e:	d0cc      	beq.n	8001aea <UART_SetConfig+0xee>
 8001b50:	d845      	bhi.n	8001bde <UART_SetConfig+0x1e2>
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1e2      	bne.n	8001b1c <UART_SetConfig+0x120>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b56:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001b5a:	d03d      	beq.n	8001bd8 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b5c:	f7ff fcc8 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001b60:	2800      	cmp	r0, #0
 8001b62:	d0d3      	beq.n	8001b0c <UART_SetConfig+0x110>
 8001b64:	e7c5      	b.n	8001af2 <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b66:	483d      	ldr	r0, [pc, #244]	@ (8001c5c <UART_SetConfig+0x260>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b68:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b6a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b6e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b76:	f1a3 0110 	sub.w	r1, r3, #16
 8001b7a:	4291      	cmp	r1, r2
 8001b7c:	f63f af77 	bhi.w	8001a6e <UART_SetConfig+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b80:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b84:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8001b88:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b8a:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
 8001b90:	e7bc      	b.n	8001b0c <UART_SetConfig+0x110>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b92:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001b96:	e7e7      	b.n	8001b68 <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b98:	f7ff fbd6 	bl	8001348 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d0b5      	beq.n	8001b0c <UART_SetConfig+0x110>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ba0:	0040      	lsls	r0, r0, #1
 8001ba2:	e7e1      	b.n	8001b68 <UART_SetConfig+0x16c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <UART_SetConfig+0x258>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001baa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d09b      	beq.n	8001aea <UART_SetConfig+0xee>
 8001bb2:	d9ce      	bls.n	8001b52 <UART_SetConfig+0x156>
 8001bb4:	2b30      	cmp	r3, #48	@ 0x30
 8001bb6:	d08a      	beq.n	8001ace <UART_SetConfig+0xd2>
 8001bb8:	e759      	b.n	8001a6e <UART_SetConfig+0x72>
 8001bba:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <UART_SetConfig+0x258>)
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bc0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001bc4:	2b80      	cmp	r3, #128	@ 0x80
 8001bc6:	d090      	beq.n	8001aea <UART_SetConfig+0xee>
 8001bc8:	d9c3      	bls.n	8001b52 <UART_SetConfig+0x156>
 8001bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bcc:	f43f af7f 	beq.w	8001ace <UART_SetConfig+0xd2>
 8001bd0:	e74d      	b.n	8001a6e <UART_SetConfig+0x72>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001bd2:	f7ff fc9d 	bl	8001510 <HAL_RCC_GetPCLK2Freq>
        break;
 8001bd6:	e7e1      	b.n	8001b9c <UART_SetConfig+0x1a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001bd8:	f7ff fc8a 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
        break;
 8001bdc:	e7de      	b.n	8001b9c <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001be2:	f43f af74 	beq.w	8001ace <UART_SetConfig+0xd2>
 8001be6:	e742      	b.n	8001a6e <UART_SetConfig+0x72>
 8001be8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <UART_SetConfig+0x258>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bf6:	f43f af78 	beq.w	8001aea <UART_SetConfig+0xee>
 8001bfa:	d9aa      	bls.n	8001b52 <UART_SetConfig+0x156>
 8001bfc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001c00:	f43f af65 	beq.w	8001ace <UART_SetConfig+0xd2>
 8001c04:	e733      	b.n	8001a6e <UART_SetConfig+0x72>
 8001c06:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <UART_SetConfig+0x258>)
 8001c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c14:	f43f af69 	beq.w	8001aea <UART_SetConfig+0xee>
 8001c18:	d99b      	bls.n	8001b52 <UART_SetConfig+0x156>
 8001c1a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001c1e:	f43f af56 	beq.w	8001ace <UART_SetConfig+0xd2>
 8001c22:	e724      	b.n	8001a6e <UART_SetConfig+0x72>
 8001c24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001c28:	f43f af51 	beq.w	8001ace <UART_SetConfig+0xd2>
 8001c2c:	e71f      	b.n	8001a6e <UART_SetConfig+0x72>
 8001c2e:	bf00      	nop
 8001c30:	efff69f3 	.word	0xefff69f3
 8001c34:	40011000 	.word	0x40011000
 8001c38:	40004400 	.word	0x40004400
 8001c3c:	40004800 	.word	0x40004800
 8001c40:	40004c00 	.word	0x40004c00
 8001c44:	40005000 	.word	0x40005000
 8001c48:	40011400 	.word	0x40011400
 8001c4c:	40007800 	.word	0x40007800
 8001c50:	40007c00 	.word	0x40007c00
 8001c54:	40023800 	.word	0x40023800
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	01e84800 	.word	0x01e84800

08001c60 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c60:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001c62:	071a      	lsls	r2, r3, #28
{
 8001c64:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c66:	d506      	bpl.n	8001c76 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c68:	6801      	ldr	r1, [r0, #0]
 8001c6a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8001c6c:	684a      	ldr	r2, [r1, #4]
 8001c6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c72:	4322      	orrs	r2, r4
 8001c74:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c76:	07dc      	lsls	r4, r3, #31
 8001c78:	d506      	bpl.n	8001c88 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c7a:	6801      	ldr	r1, [r0, #0]
 8001c7c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8001c7e:	684a      	ldr	r2, [r1, #4]
 8001c80:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001c84:	4322      	orrs	r2, r4
 8001c86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c88:	0799      	lsls	r1, r3, #30
 8001c8a:	d506      	bpl.n	8001c9a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c8c:	6801      	ldr	r1, [r0, #0]
 8001c8e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8001c90:	684a      	ldr	r2, [r1, #4]
 8001c92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c96:	4322      	orrs	r2, r4
 8001c98:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c9a:	075a      	lsls	r2, r3, #29
 8001c9c:	d506      	bpl.n	8001cac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c9e:	6801      	ldr	r1, [r0, #0]
 8001ca0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8001ca2:	684a      	ldr	r2, [r1, #4]
 8001ca4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ca8:	4322      	orrs	r2, r4
 8001caa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001cac:	06dc      	lsls	r4, r3, #27
 8001cae:	d506      	bpl.n	8001cbe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001cb0:	6801      	ldr	r1, [r0, #0]
 8001cb2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8001cb4:	688a      	ldr	r2, [r1, #8]
 8001cb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cba:	4322      	orrs	r2, r4
 8001cbc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cbe:	0699      	lsls	r1, r3, #26
 8001cc0:	d506      	bpl.n	8001cd0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cc2:	6801      	ldr	r1, [r0, #0]
 8001cc4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8001cc6:	688a      	ldr	r2, [r1, #8]
 8001cc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ccc:	4322      	orrs	r2, r4
 8001cce:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cd0:	065a      	lsls	r2, r3, #25
 8001cd2:	d50a      	bpl.n	8001cea <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cd4:	6801      	ldr	r1, [r0, #0]
 8001cd6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8001cd8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cda:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cde:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8001ce2:	ea42 0204 	orr.w	r2, r2, r4
 8001ce6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ce8:	d00b      	beq.n	8001d02 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001cea:	061b      	lsls	r3, r3, #24
 8001cec:	d506      	bpl.n	8001cfc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001cee:	6802      	ldr	r2, [r0, #0]
 8001cf0:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001cf2:	6853      	ldr	r3, [r2, #4]
 8001cf4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6053      	str	r3, [r2, #4]
}
 8001cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d00:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d02:	684a      	ldr	r2, [r1, #4]
 8001d04:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8001d06:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8001d0a:	4322      	orrs	r2, r4
 8001d0c:	604a      	str	r2, [r1, #4]
 8001d0e:	e7ec      	b.n	8001cea <UART_AdvFeatureConfig+0x8a>

08001d10 <UART_WaitOnFlagUntilTimeout>:
{
 8001d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d14:	9e08      	ldr	r6, [sp, #32]
 8001d16:	460c      	mov	r4, r1
 8001d18:	4607      	mov	r7, r0
 8001d1a:	4615      	mov	r5, r2
 8001d1c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d1e:	6801      	ldr	r1, [r0, #0]
 8001d20:	69ca      	ldr	r2, [r1, #28]
 8001d22:	ea34 0202 	bics.w	r2, r4, r2
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	42ab      	cmp	r3, r5
 8001d2e:	d109      	bne.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x34>
    if (Timeout != HAL_MAX_DELAY)
 8001d30:	1c73      	adds	r3, r6, #1
 8001d32:	d10b      	bne.n	8001d4c <UART_WaitOnFlagUntilTimeout+0x3c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d34:	69cb      	ldr	r3, [r1, #28]
 8001d36:	ea34 0303 	bics.w	r3, r4, r3
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	42ab      	cmp	r3, r5
 8001d42:	d0f7      	beq.n	8001d34 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d4c:	f7fe fe76 	bl	8000a3c <HAL_GetTick>
 8001d50:	eba0 0008 	sub.w	r0, r0, r8
 8001d54:	fab6 f986 	clz	r9, r6
 8001d58:	42b0      	cmp	r0, r6
 8001d5a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001d5e:	d81a      	bhi.n	8001d96 <UART_WaitOnFlagUntilTimeout+0x86>
 8001d60:	b1ce      	cbz	r6, 8001d96 <UART_WaitOnFlagUntilTimeout+0x86>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	680b      	ldr	r3, [r1, #0]
 8001d66:	0758      	lsls	r0, r3, #29
 8001d68:	d5da      	bpl.n	8001d20 <UART_WaitOnFlagUntilTimeout+0x10>
 8001d6a:	2c80      	cmp	r4, #128	@ 0x80
 8001d6c:	d0d8      	beq.n	8001d20 <UART_WaitOnFlagUntilTimeout+0x10>
 8001d6e:	2c40      	cmp	r4, #64	@ 0x40
 8001d70:	d0d6      	beq.n	8001d20 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d72:	69cb      	ldr	r3, [r1, #28]
 8001d74:	f013 0a08 	ands.w	sl, r3, #8
 8001d78:	d10f      	bne.n	8001d9a <UART_WaitOnFlagUntilTimeout+0x8a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d7a:	69ca      	ldr	r2, [r1, #28]
 8001d7c:	0512      	lsls	r2, r2, #20
 8001d7e:	d5cf      	bpl.n	8001d20 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8001d84:	4638      	mov	r0, r7
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d86:	620a      	str	r2, [r1, #32]
          UART_EndRxTransfer(huart);
 8001d88:	f7ff fe08 	bl	800199c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001d8c:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8001d8e:	f887 a078 	strb.w	sl, [r7, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001d92:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e7d5      	b.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x36>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d9a:	2408      	movs	r4, #8
          UART_EndRxTransfer(huart);
 8001d9c:	4638      	mov	r0, r7
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d9e:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 8001da0:	f7ff fdfc 	bl	800199c <UART_EndRxTransfer>
          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001da6:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8001daa:	f887 9078 	strb.w	r9, [r7, #120]	@ 0x78
          return HAL_ERROR;
 8001dae:	e7ca      	b.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x36>

08001db0 <UART_CheckIdleState>:
{
 8001db0:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db2:	2500      	movs	r5, #0
{
 8001db4:	4604      	mov	r4, r0
 8001db6:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db8:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8001dbc:	f7fe fe3e 	bl	8000a3c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	071b      	lsls	r3, r3, #28
 8001dc6:	d40c      	bmi.n	8001de2 <UART_CheckIdleState+0x32>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dc8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8001dca:	2220      	movs	r2, #32
  return HAL_OK;
 8001dcc:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8001dce:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001dd0:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dd4:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dd6:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8001dde:	b002      	add	sp, #8
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001de2:	f06f 467e 	mvn.w	r6, #4261412864	@ 0xfe000000
 8001de6:	4603      	mov	r3, r0
 8001de8:	462a      	mov	r2, r5
 8001dea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001dee:	4620      	mov	r0, r4
 8001df0:	9600      	str	r6, [sp, #0]
 8001df2:	f7ff ff8d 	bl	8001d10 <UART_WaitOnFlagUntilTimeout>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d0e6      	beq.n	8001dc8 <UART_CheckIdleState+0x18>
 8001dfa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dfc:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e04:	e842 3100 	strex	r1, r3, [r2]
 8001e08:	2900      	cmp	r1, #0
 8001e0a:	d1f7      	bne.n	8001dfc <UART_CheckIdleState+0x4c>
      huart->gState = HAL_UART_STATE_READY;
 8001e0c:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8001e0e:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8001e10:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8001e12:	e7e1      	b.n	8001dd8 <UART_CheckIdleState+0x28>

08001e14 <HAL_UART_Init>:
  if (huart == NULL)
 8001e14:	b370      	cbz	r0, 8001e74 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e16:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8001e18:	b510      	push	{r4, lr}
 8001e1a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e1c:	b32b      	cbz	r3, 8001e6a <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8001e1e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e20:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e22:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8001e24:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001e26:	6813      	ldr	r3, [r2, #0]
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e2e:	b9c1      	cbnz	r1, 8001e62 <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e30:	4620      	mov	r0, r4
 8001e32:	f7ff fde3 	bl	80019fc <UART_SetConfig>
 8001e36:	2801      	cmp	r0, #1
 8001e38:	d011      	beq.n	8001e5e <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001e3c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e4c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
}
 8001e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001e58:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001e5a:	f7ff bfa9 	b.w	8001db0 <UART_CheckIdleState>
}
 8001e5e:	2001      	movs	r0, #1
 8001e60:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fefc 	bl	8001c60 <UART_AdvFeatureConfig>
 8001e68:	e7e2      	b.n	8001e30 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8001e6a:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8001e6e:	f7fe fcb3 	bl	80007d8 <HAL_UART_MspInit>
 8001e72:	e7d4      	b.n	8001e1e <HAL_UART_Init+0xa>
}
 8001e74:	2001      	movs	r0, #1
 8001e76:	4770      	bx	lr

08001e78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001e78:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	e002      	b.n	8001e86 <USB_CoreReset+0xe>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001e80:	6903      	ldr	r3, [r0, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	db09      	blt.n	8001e9a <USB_CoreReset+0x22>
    count++;
 8001e86:	9b01      	ldr	r3, [sp, #4]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8001e8c:	9b01      	ldr	r3, [sp, #4]
 8001e8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8001e92:	d9f5      	bls.n	8001e80 <USB_CoreReset+0x8>
      return HAL_TIMEOUT;
 8001e94:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8001e96:	b002      	add	sp, #8
 8001e98:	4770      	bx	lr
  count = 10U;
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 8001e9e:	9b01      	ldr	r3, [sp, #4]
 8001ea0:	b12b      	cbz	r3, 8001eae <USB_CoreReset+0x36>
    count--;
 8001ea2:	9b01      	ldr	r3, [sp, #4]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 8001ea8:	9b01      	ldr	r3, [sp, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <USB_CoreReset+0x2a>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001eae:	6903      	ldr	r3, [r0, #16]
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6103      	str	r3, [r0, #16]
 8001eb6:	e003      	b.n	8001ec0 <USB_CoreReset+0x48>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001eb8:	6903      	ldr	r3, [r0, #16]
 8001eba:	f013 0301 	ands.w	r3, r3, #1
 8001ebe:	d007      	beq.n	8001ed0 <USB_CoreReset+0x58>
    count++;
 8001ec0:	9b01      	ldr	r3, [sp, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8001ec6:	9b01      	ldr	r3, [sp, #4]
 8001ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8001ecc:	d9f4      	bls.n	8001eb8 <USB_CoreReset+0x40>
 8001ece:	e7e1      	b.n	8001e94 <USB_CoreReset+0x1c>
  return HAL_OK;
 8001ed0:	4618      	mov	r0, r3
}
 8001ed2:	b002      	add	sp, #8
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <USB_CoreInit>:
{
 8001ed8:	b084      	sub	sp, #16
 8001eda:	b510      	push	{r4, lr}
 8001edc:	f10d 0c0c 	add.w	ip, sp, #12
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8001ee6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001eea:	f89d 2018 	ldrb.w	r2, [sp, #24]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d032      	beq.n	8001f58 <USB_CoreInit+0x80>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d125      	bne.n	8001f42 <USB_CoreInit+0x6a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001ef6:	6b81      	ldr	r1, [r0, #56]	@ 0x38
    if (cfg.use_external_vbus == 1U)
 8001ef8:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001efa:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <USB_CoreInit+0xb4>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001efc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8001f00:	6381      	str	r1, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001f02:	68c1      	ldr	r1, [r0, #12]
 8001f04:	ea03 0301 	and.w	r3, r3, r1
 8001f08:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001f0a:	68c3      	ldr	r3, [r0, #12]
 8001f0c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001f10:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8001f12:	68c3      	ldr	r3, [r0, #12]
 8001f14:	f023 0310 	bic.w	r3, r3, #16
 8001f18:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001f1a:	d031      	beq.n	8001f80 <USB_CoreInit+0xa8>
    ret = USB_CoreReset(USBx);
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff ffab 	bl	8001e78 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001f22:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <USB_CoreInit+0x62>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001f2a:	68a3      	ldr	r3, [r4, #8]
 8001f2c:	f043 0306 	orr.w	r3, r3, #6
 8001f30:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001f32:	68a3      	ldr	r3, [r4, #8]
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	60a3      	str	r3, [r4, #8]
}
 8001f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f3e:	b004      	add	sp, #16
 8001f40:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001f42:	68c3      	ldr	r3, [r0, #12]
 8001f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f48:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001f4a:	f7ff ff95 	bl	8001e78 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f4e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f54:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001f56:	e7e4      	b.n	8001f22 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f58:	6b81      	ldr	r1, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001f5a:	f1a3 1342 	sub.w	r3, r3, #4325442	@ 0x420042
    if (cfg.use_external_vbus == 1U)
 8001f5e:	2a01      	cmp	r2, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f60:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8001f64:	6381      	str	r1, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001f66:	68c1      	ldr	r1, [r0, #12]
 8001f68:	ea03 0301 	and.w	r3, r3, r1
 8001f6c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8001f6e:	68c3      	ldr	r3, [r0, #12]
 8001f70:	f043 0310 	orr.w	r3, r3, #16
 8001f74:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001f76:	68c3      	ldr	r3, [r0, #12]
 8001f78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001f7c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001f7e:	d1cd      	bne.n	8001f1c <USB_CoreInit+0x44>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001f80:	68e3      	ldr	r3, [r4, #12]
 8001f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f86:	60e3      	str	r3, [r4, #12]
 8001f88:	e7c8      	b.n	8001f1c <USB_CoreInit+0x44>
 8001f8a:	bf00      	nop
 8001f8c:	ffbdffbf 	.word	0xffbdffbf

08001f90 <USB_DisableGlobalInt>:
{
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	609a      	str	r2, [r3, #8]
}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop

08001fa0 <USB_SetCurrentMode>:
{
 8001fa0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001fa2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001fa4:	2901      	cmp	r1, #1
{
 8001fa6:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001fa8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8001fac:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001fae:	d017      	beq.n	8001fe0 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8001fb0:	b9a1      	cbnz	r1, 8001fdc <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001fb2:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8001fb4:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001fb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001fba:	60c3      	str	r3, [r0, #12]
 8001fbc:	e001      	b.n	8001fc2 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8001fbe:	2cc8      	cmp	r4, #200	@ 0xc8
 8001fc0:	d00c      	beq.n	8001fdc <USB_SetCurrentMode+0x3c>
      HAL_Delay(10U);
 8001fc2:	200a      	movs	r0, #10
      ms += 10U;
 8001fc4:	340a      	adds	r4, #10
      HAL_Delay(10U);
 8001fc6:	f7fe fd3f 	bl	8000a48 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8001fca:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8001fcc:	07db      	lsls	r3, r3, #31
 8001fce:	d4f6      	bmi.n	8001fbe <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8001fd0:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8001fd4:	fab0 f080 	clz	r0, r0
 8001fd8:	0940      	lsrs	r0, r0, #5
}
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
}
 8001fde:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001fe0:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8001fe2:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001fe4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001fe8:	60c3      	str	r3, [r0, #12]
 8001fea:	e001      	b.n	8001ff0 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8001fec:	2cc8      	cmp	r4, #200	@ 0xc8
 8001fee:	d0f5      	beq.n	8001fdc <USB_SetCurrentMode+0x3c>
      HAL_Delay(10U);
 8001ff0:	200a      	movs	r0, #10
      ms += 10U;
 8001ff2:	340a      	adds	r4, #10
      HAL_Delay(10U);
 8001ff4:	f7fe fd28 	bl	8000a48 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8001ff8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8001ffa:	07da      	lsls	r2, r3, #31
 8001ffc:	d5f6      	bpl.n	8001fec <USB_SetCurrentMode+0x4c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8001ffe:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8002002:	fab0 f080 	clz	r0, r0
 8002006:	0940      	lsrs	r0, r0, #5
 8002008:	e7e7      	b.n	8001fda <USB_SetCurrentMode+0x3a>
 800200a:	bf00      	nop

0800200c <USB_FlushTxFifo>:
{
 800200c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	e002      	b.n	800201a <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002014:	6903      	ldr	r3, [r0, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db09      	blt.n	800202e <USB_FlushTxFifo+0x22>
    count++;
 800201a:	9b01      	ldr	r3, [sp, #4]
 800201c:	3301      	adds	r3, #1
 800201e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002020:	9b01      	ldr	r3, [sp, #4]
 8002022:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002026:	d9f5      	bls.n	8002014 <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 8002028:	2003      	movs	r0, #3
}
 800202a:	b002      	add	sp, #8
 800202c:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800202e:	0189      	lsls	r1, r1, #6
  count = 0U;
 8002030:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002032:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8002036:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002038:	6101      	str	r1, [r0, #16]
 800203a:	e003      	b.n	8002044 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800203c:	6903      	ldr	r3, [r0, #16]
 800203e:	f013 0320 	ands.w	r3, r3, #32
 8002042:	d007      	beq.n	8002054 <USB_FlushTxFifo+0x48>
    count++;
 8002044:	9b01      	ldr	r3, [sp, #4]
 8002046:	3301      	adds	r3, #1
 8002048:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800204a:	9b01      	ldr	r3, [sp, #4]
 800204c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002050:	d9f4      	bls.n	800203c <USB_FlushTxFifo+0x30>
 8002052:	e7e9      	b.n	8002028 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 8002054:	4618      	mov	r0, r3
}
 8002056:	b002      	add	sp, #8
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop

0800205c <USB_FlushRxFifo>:
{
 800205c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	e002      	b.n	800206a <USB_FlushRxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002064:	6903      	ldr	r3, [r0, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db09      	blt.n	800207e <USB_FlushRxFifo+0x22>
    count++;
 800206a:	9b01      	ldr	r3, [sp, #4]
 800206c:	3301      	adds	r3, #1
 800206e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002070:	9b01      	ldr	r3, [sp, #4]
 8002072:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002076:	d9f5      	bls.n	8002064 <USB_FlushRxFifo+0x8>
      return HAL_TIMEOUT;
 8002078:	2003      	movs	r0, #3
}
 800207a:	b002      	add	sp, #8
 800207c:	4770      	bx	lr
  count = 0U;
 800207e:	2200      	movs	r2, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002080:	2310      	movs	r3, #16
  count = 0U;
 8002082:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002084:	6103      	str	r3, [r0, #16]
 8002086:	e003      	b.n	8002090 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002088:	6903      	ldr	r3, [r0, #16]
 800208a:	f013 0310 	ands.w	r3, r3, #16
 800208e:	d007      	beq.n	80020a0 <USB_FlushRxFifo+0x44>
    count++;
 8002090:	9b01      	ldr	r3, [sp, #4]
 8002092:	3301      	adds	r3, #1
 8002094:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002096:	9b01      	ldr	r3, [sp, #4]
 8002098:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800209c:	d9f4      	bls.n	8002088 <USB_FlushRxFifo+0x2c>
 800209e:	e7eb      	b.n	8002078 <USB_FlushRxFifo+0x1c>
  return HAL_OK;
 80020a0:	4618      	mov	r0, r3
}
 80020a2:	b002      	add	sp, #8
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop

080020a8 <USB_DevInit>:
{
 80020a8:	b084      	sub	sp, #16
 80020aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ac:	ad07      	add	r5, sp, #28
 80020ae:	4604      	mov	r4, r0
 80020b0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80020ba:	f89d c01f 	ldrb.w	ip, [sp, #31]
 80020be:	f89d 0021 	ldrb.w	r0, [sp, #33]	@ 0x21
    USBx->DIEPTXF[i] = 0U;
 80020c2:	4619      	mov	r1, r3
 80020c4:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 80020c8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
  for (i = 0U; i < 15U; i++)
 80020cc:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80020ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80020d2:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80020d4:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80020d6:	d1f7      	bne.n	80020c8 <USB_DevInit+0x20>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80020d8:	f504 6700 	add.w	r7, r4, #2048	@ 0x800
  if (cfg.vbus_sensing_enable == 0U)
 80020dc:	2e00      	cmp	r6, #0
 80020de:	f040 80a2 	bne.w	8002226 <USB_DevInit+0x17e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80020ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80020ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80020f0:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f8:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002100:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002102:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002104:	2801      	cmp	r0, #1
  USBx_PCGCCTL = 0U;
 8002106:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  USBx_DEVICE->DCFG |= speed;
 800210a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800210e:	d036      	beq.n	800217e <USB_DevInit+0xd6>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002110:	2803      	cmp	r0, #3
 8002112:	d034      	beq.n	800217e <USB_DevInit+0xd6>
  USBx_DEVICE->DCFG |= speed;
 8002114:	f043 0303 	orr.w	r3, r3, #3
 8002118:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800211c:	2110      	movs	r1, #16
 800211e:	4620      	mov	r0, r4
 8002120:	f7ff ff74 	bl	800200c <USB_FlushTxFifo>
 8002124:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002126:	4620      	mov	r0, r4
 8002128:	f7ff ff98 	bl	800205c <USB_FlushRxFifo>
 800212c:	ea41 0e00 	orr.w	lr, r1, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8002130:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002132:	fa5f fe8e 	uxtb.w	lr, lr
  USBx_DEVICE->DIEPMSK = 0U;
 8002136:	613a      	str	r2, [r7, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002138:	f1be 0e00 	subs.w	lr, lr, #0
  USBx_DEVICE->DOEPMSK = 0U;
 800213c:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800213e:	61fa      	str	r2, [r7, #28]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002140:	bf18      	it	ne
 8002142:	f04f 0e01 	movne.w	lr, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002146:	b33d      	cbz	r5, 8002198 <USB_DevInit+0xf0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002148:	f8d4 1900 	ldr.w	r1, [r4, #2304]	@ 0x900
 800214c:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 8002150:	2900      	cmp	r1, #0
 8002152:	db1c      	blt.n	800218e <USB_DevInit+0xe6>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002154:	2100      	movs	r1, #0
 8002156:	6019      	str	r1, [r3, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002158:	2000      	movs	r0, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800215a:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800215e:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002160:	6118      	str	r0, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002162:	6099      	str	r1, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002164:	3320      	adds	r3, #32
 8002166:	42aa      	cmp	r2, r5
 8002168:	d03c      	beq.n	80021e4 <USB_DevInit+0x13c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800216a:	f8d3 c000 	ldr.w	ip, [r3]
 800216e:	f1bc 0f00 	cmp.w	ip, #0
 8002172:	daef      	bge.n	8002154 <USB_DevInit+0xac>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002174:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
 8002178:	f8c3 c000 	str.w	ip, [r3]
 800217c:	e7ef      	b.n	800215e <USB_DevInit+0xb6>
    if (cfg.speed == USBD_HS_SPEED)
 800217e:	f1bc 0f00 	cmp.w	ip, #0
 8002182:	d0c9      	beq.n	8002118 <USB_DevInit+0x70>
  USBx_DEVICE->DCFG |= speed;
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  return HAL_OK;
 800218c:	e7c6      	b.n	800211c <USB_DevInit+0x74>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800218e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002192:	f8c4 1900 	str.w	r1, [r4, #2304]	@ 0x900
 8002196:	e7df      	b.n	8002158 <USB_DevInit+0xb0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002198:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800219a:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800219c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021a0:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80021a2:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
  USBx->GINTMSK = 0U;
 80021a6:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80021a8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80021aa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80021ae:	b91b      	cbnz	r3, 80021b8 <USB_DevInit+0x110>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80021b0:	69a3      	ldr	r3, [r4, #24]
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80021b8:	69a2      	ldr	r2, [r4, #24]
 80021ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <USB_DevInit+0x188>)
 80021bc:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 80021be:	f89d 2022 	ldrb.w	r2, [sp, #34]	@ 0x22
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80021c2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80021c4:	b11a      	cbz	r2, 80021ce <USB_DevInit+0x126>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80021c6:	69a3      	ldr	r3, [r4, #24]
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80021ce:	2e01      	cmp	r6, #1
 80021d0:	d103      	bne.n	80021da <USB_DevInit+0x132>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80021d2:	69a2      	ldr	r2, [r4, #24]
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <USB_DevInit+0x18c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61a3      	str	r3, [r4, #24]
}
 80021da:	4670      	mov	r0, lr
 80021dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80021e0:	b004      	add	sp, #16
 80021e2:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80021e4:	f8d4 2b00 	ldr.w	r2, [r4, #2816]	@ 0xb00
 80021e8:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	db14      	blt.n	800221a <USB_DevInit+0x172>
 80021f0:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80021f2:	2100      	movs	r1, #0
 80021f4:	6019      	str	r1, [r3, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80021f6:	f04f 0c00 	mov.w	ip, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80021fa:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80021fe:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002200:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002204:	6098      	str	r0, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002206:	3320      	adds	r3, #32
 8002208:	42aa      	cmp	r2, r5
 800220a:	d0c5      	beq.n	8002198 <USB_DevInit+0xf0>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	2900      	cmp	r1, #0
 8002210:	daef      	bge.n	80021f2 <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002212:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8002216:	6019      	str	r1, [r3, #0]
 8002218:	e7f1      	b.n	80021fe <USB_DevInit+0x156>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800221a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800221e:	f8c4 2b00 	str.w	r2, [r4, #2816]	@ 0xb00
 8002222:	2200      	movs	r2, #0
 8002224:	e7e7      	b.n	80021f6 <USB_DevInit+0x14e>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002226:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002228:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800222c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800222e:	e768      	b.n	8002102 <USB_DevInit+0x5a>
 8002230:	803c3800 	.word	0x803c3800
 8002234:	40000004 	.word	0x40000004

08002238 <USB_DevDisconnect>:
{
 8002238:	4603      	mov	r3, r0
}
 800223a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800223c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002240:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002244:	f022 0203 	bic.w	r2, r2, #3
 8002248:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800224c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	604b      	str	r3, [r1, #4]
}
 8002256:	4770      	bx	lr

08002258 <memset>:
 8002258:	4402      	add	r2, r0
 800225a:	4603      	mov	r3, r0
 800225c:	4293      	cmp	r3, r2
 800225e:	d100      	bne.n	8002262 <memset+0xa>
 8002260:	4770      	bx	lr
 8002262:	f803 1b01 	strb.w	r1, [r3], #1
 8002266:	e7f9      	b.n	800225c <memset+0x4>

08002268 <__libc_init_array>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	4d0d      	ldr	r5, [pc, #52]	@ (80022a0 <__libc_init_array+0x38>)
 800226c:	4c0d      	ldr	r4, [pc, #52]	@ (80022a4 <__libc_init_array+0x3c>)
 800226e:	1b64      	subs	r4, r4, r5
 8002270:	10a4      	asrs	r4, r4, #2
 8002272:	2600      	movs	r6, #0
 8002274:	42a6      	cmp	r6, r4
 8002276:	d109      	bne.n	800228c <__libc_init_array+0x24>
 8002278:	4d0b      	ldr	r5, [pc, #44]	@ (80022a8 <__libc_init_array+0x40>)
 800227a:	4c0c      	ldr	r4, [pc, #48]	@ (80022ac <__libc_init_array+0x44>)
 800227c:	f000 f818 	bl	80022b0 <_init>
 8002280:	1b64      	subs	r4, r4, r5
 8002282:	10a4      	asrs	r4, r4, #2
 8002284:	2600      	movs	r6, #0
 8002286:	42a6      	cmp	r6, r4
 8002288:	d105      	bne.n	8002296 <__libc_init_array+0x2e>
 800228a:	bd70      	pop	{r4, r5, r6, pc}
 800228c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002290:	4798      	blx	r3
 8002292:	3601      	adds	r6, #1
 8002294:	e7ee      	b.n	8002274 <__libc_init_array+0xc>
 8002296:	f855 3b04 	ldr.w	r3, [r5], #4
 800229a:	4798      	blx	r3
 800229c:	3601      	adds	r6, #1
 800229e:	e7f2      	b.n	8002286 <__libc_init_array+0x1e>
 80022a0:	080022e8 	.word	0x080022e8
 80022a4:	080022e8 	.word	0x080022e8
 80022a8:	080022e8 	.word	0x080022e8
 80022ac:	080022ec 	.word	0x080022ec

080022b0 <_init>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	bf00      	nop
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr

080022bc <_fini>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr
