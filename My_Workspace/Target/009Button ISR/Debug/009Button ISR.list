
009Button ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800042c  08000434  00001434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800042c  0800042c  00001434  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800042c  0800042c  00001434  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800042c  08000434  00001434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800042c  0800042c  0000142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000430  08000430  00001430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000434  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000434  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000226  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000104  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b56  00000000  00000000  00001821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000677  00000000  00000000  00003377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000781a  00000000  00000000  000039ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a4  00000000  00000000  0000b24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0000b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000000 	.word	0x20000000
 80001fc:	00000000 	.word	0x00000000
 8000200:	08000414 	.word	0x08000414

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000004 	.word	0x20000004
 800021c:	08000414 	.word	0x08000414

08000220 <main>:
// Function prototypes
void button_init(void);
void EXTI15_10_IRQHandler(void);

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
    button_init();
 8000226:	f000 f835 	bl	8000294 <button_init>

    while (1)
    {
        // Disable interrupt mask temporarily
        *pEXTIMaskReg &= ~(1 << 13);
 800022a:	4b15      	ldr	r3, [pc, #84]	@ (8000280 <main+0x60>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a14      	ldr	r2, [pc, #80]	@ (8000280 <main+0x60>)
 8000230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000234:	6013      	str	r3, [r2, #0]

        if (g_button_pressed)
 8000236:	4b13      	ldr	r3, [pc, #76]	@ (8000284 <main+0x64>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2b00      	cmp	r3, #0
 800023e:	d017      	beq.n	8000270 <main+0x50>
        {
            for (volatile uint32_t i = 0; i < 500000 / 2; i++); // debounce delay
 8000240:	2300      	movs	r3, #0
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	e002      	b.n	800024c <main+0x2c>
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3301      	adds	r3, #1
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a0e      	ldr	r2, [pc, #56]	@ (8000288 <main+0x68>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d9f8      	bls.n	8000246 <main+0x26>
            g_button_press_count++;
 8000254:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <main+0x6c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	4a0c      	ldr	r2, [pc, #48]	@ (800028c <main+0x6c>)
 800025c:	6013      	str	r3, [r2, #0]

            // Toggle LED
            *pGPIOBOutReg ^= (1 << 7);
 800025e:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <main+0x70>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a0b      	ldr	r2, [pc, #44]	@ (8000290 <main+0x70>)
 8000264:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8000268:	6013      	str	r3, [r2, #0]

            g_button_pressed = 0;
 800026a:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <main+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]
        }

        // Re-enable interrupt mask
        *pEXTIMaskReg |= (1 << 13);
 8000270:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <main+0x60>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a02      	ldr	r2, [pc, #8]	@ (8000280 <main+0x60>)
 8000276:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800027a:	6013      	str	r3, [r2, #0]
        *pEXTIMaskReg &= ~(1 << 13);
 800027c:	e7d5      	b.n	800022a <main+0xa>
 800027e:	bf00      	nop
 8000280:	40013c00 	.word	0x40013c00
 8000284:	2000001c 	.word	0x2000001c
 8000288:	0003d08f 	.word	0x0003d08f
 800028c:	20000020 	.word	0x20000020
 8000290:	40020414 	.word	0x40020414

08000294 <button_init>:
    }
}

// ------------------- Initialization -------------------
void button_init(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
    // 1. Enable GPIOB (LED) and GPIOC (Button) clocks
    *pClkCtrlReg_AHB1 |= (1 << 1); // GPIOB
 800029a:	4b25      	ldr	r3, [pc, #148]	@ (8000330 <button_init+0x9c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a24      	ldr	r2, [pc, #144]	@ (8000330 <button_init+0x9c>)
 80002a0:	f043 0302 	orr.w	r3, r3, #2
 80002a4:	6013      	str	r3, [r2, #0]
    *pClkCtrlReg_AHB1 |= (1 << 2); // GPIOC
 80002a6:	4b22      	ldr	r3, [pc, #136]	@ (8000330 <button_init+0x9c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a21      	ldr	r2, [pc, #132]	@ (8000330 <button_init+0x9c>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6013      	str	r3, [r2, #0]

    // 2. Enable SYSCFG clock on APB2 (for external interrupt line mapping)
    *pClkCtrlReg_APB2 |= (1 << 14);
 80002b2:	4b20      	ldr	r3, [pc, #128]	@ (8000334 <button_init+0xa0>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000334 <button_init+0xa0>)
 80002b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002bc:	6013      	str	r3, [r2, #0]

    // 3. Configure PB7 as output
    *pGPIOBModeReg &= ~(3 << (7 * 2)); // clear bits
 80002be:	4b1e      	ldr	r3, [pc, #120]	@ (8000338 <button_init+0xa4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000338 <button_init+0xa4>)
 80002c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80002c8:	6013      	str	r3, [r2, #0]
    *pGPIOBModeReg |=  (1 << (7 * 2)); // set as output
 80002ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000338 <button_init+0xa4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000338 <button_init+0xa4>)
 80002d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002d4:	6013      	str	r3, [r2, #0]

    // 4. Configure PC13 as input (default, but ensure bits are cleared)
    *pGPIOCModeReg &= ~(3 << (13 * 2));
 80002d6:	4b19      	ldr	r3, [pc, #100]	@ (800033c <button_init+0xa8>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a18      	ldr	r2, [pc, #96]	@ (800033c <button_init+0xa8>)
 80002dc:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002e0:	6013      	str	r3, [r2, #0]

    // 5. Map EXTI13 line to Port C in SYSCFG_EXTICR4
    *pSYSCFG_EXTICR4 &= ~(0xF << 4); // clear EXTI13 field
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <button_init+0xac>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a16      	ldr	r2, [pc, #88]	@ (8000340 <button_init+0xac>)
 80002e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002ec:	6013      	str	r3, [r2, #0]
    *pSYSCFG_EXTICR4 |=  (0x2 << 4); // 0x2 = Port C
 80002ee:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <button_init+0xac>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a13      	ldr	r2, [pc, #76]	@ (8000340 <button_init+0xac>)
 80002f4:	f043 0320 	orr.w	r3, r3, #32
 80002f8:	6013      	str	r3, [r2, #0]

    // 6. Configure EXTI13 for falling edge trigger (button active-low)
    *pEXTIEdgeReg |= (1 << 13);
 80002fa:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <button_init+0xb0>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <button_init+0xb0>)
 8000300:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000304:	6013      	str	r3, [r2, #0]

    // 7. Unmask interrupt line 13
    *pEXTIMaskReg |= (1 << 13);
 8000306:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <button_init+0xb4>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <button_init+0xb4>)
 800030c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000310:	6013      	str	r3, [r2, #0]

    // 8. Enable IRQ in NVIC (EXTI15_10 line, position 40)
    volatile uint32_t *pNVIC_ISER1 = (uint32_t*)0xE000E104; // ISER1 handles IRQs 32–63
 8000312:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <button_init+0xb8>)
 8000314:	607b      	str	r3, [r7, #4]
    *pNVIC_ISER1 |= (1 << (40 - 32)); // enable EXTI15_10_IRQn
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	601a      	str	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023830 	.word	0x40023830
 8000334:	40023844 	.word	0x40023844
 8000338:	40020400 	.word	0x40020400
 800033c:	40020800 	.word	0x40020800
 8000340:	40013814 	.word	0x40013814
 8000344:	40013c0c 	.word	0x40013c0c
 8000348:	40013c00 	.word	0x40013c00
 800034c:	e000e104 	.word	0xe000e104

08000350 <EXTI15_10_IRQHandler>:

// ------------------- ISR Handler -------------------
void EXTI15_10_IRQHandler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
    g_button_pressed = 1;             // Flag set
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <EXTI15_10_IRQHandler+0x20>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
    *pEXTIPendReg |= (1 << 13);       // Clear pending bit (write 1 to clear)
 800035a:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <EXTI15_10_IRQHandler+0x24>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a05      	ldr	r2, [pc, #20]	@ (8000374 <EXTI15_10_IRQHandler+0x24>)
 8000360:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000364:	6013      	str	r3, [r2, #0]
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	2000001c 	.word	0x2000001c
 8000374:	40013c14 	.word	0x40013c14

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	@ (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	@ (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	@ (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	@ (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	@ (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80003aa:	f7ff ff39 	bl	8000220 <main>

080003ae <LoopForever>:

LoopForever:
  b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	08000434 	.word	0x08000434
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	20000024 	.word	0x20000024

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	@ (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	@ (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	0800042c 	.word	0x0800042c
 8000408:	0800042c 	.word	0x0800042c
 800040c:	0800042c 	.word	0x0800042c
 8000410:	08000430 	.word	0x08000430

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
