/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


//The RTC starting address is : 0x40023800
//RTC offset : 0x30 ---> we get 0x40023830
//
//The GPIOB Starting address is : 0x40020400 (Used to control mode)
//
//The GPIOB output data register (Used to write):
//0x40020400 + 0x14 ----> 0x40020414


#include <stdint.h>

int main(void)
{
    /* Loop forever */
	uint32_t *pClkctrlreg = (uint32_t*)0x40023830;
	uint32_t *pPortBModeReg = (uint32_t*)0x40020400 ;
	uint32_t *pPortBOutReg = (uint32_t*)0x40020414;

	//1. Enable the clock for the GPIOB peripheral in the AHB1ENR
//	uint32_t temp = *pClkctrlreg; //read operation
//	temp = temp | 0x02; //modify
//	*pClkctrlreg = temp; //write back
	*pClkctrlreg |=(1<<1) ;  //page no: 161 for port B

	//2. configure the mode of the IO pin as output  //page no 205 0x ffff3fff
	// a. Clear the 14th and 15th pin position (C:EAR)
	 *pPortBModeReg &= ~(3 << (7 * 2)); // clear bits 15:14
	 *pPortBModeReg |=  (1 << (7 * 2)); // set as output

	//the 15th and 14th bit for the GPIO B for clk setting need to enable that as read and write 14th bit should be 1 for this 00000000000010000000000000000
	while(1)
	{
	//3. Set the 3rd bit of ODR output data register HIGH for blinking an LED
	 *pPortBOutReg |= (1<<7);   // LED ON  -- 0x0080

	 //introducing small observable delay
	 //This loop executes for 10k times
	 for(uint32_t i =0; i<10000;i++);

	 //Trun of the LED but adding not operator at the outreeg
	 *pPortBOutReg &= ~(1<<7);

	 for(uint32_t i =0; i<10000;i++);

	}


}
